{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Overview: Manufacturing Data Management for Toyota Maintenance Introduction The Manufacturing Data Management (MDM) system is designed to streamline and enhance the maintenance operations for Toyota's two plants: TNGA and GD. This software solution provides comprehensive tools for monitoring, analyzing, and managing the state of various machines, spare parts, and production lines within these plants. By offering real-time data visualization, alarm monitoring, spare part management, and detailed analytics, the MDM system aims to improve operational efficiency, reduce downtime, and facilitate proactive maintenance. Project Requirements Functional Requirements Machine State Monitoring Display the current states of machines, axes, production lines, and parameter groups. Provide real-time visualization of machine parameters. Highlight critical, warning, and normal states with color-coded indicators. Real-Time Data Visualization Show real-time graphs for both static and dynamic parameters. Allow users to query data for specific time ranges and parameters. Provide tools to set and adjust warning and critical limits for parameters. Alarm Monitoring Maintain a table of alarms for selected machines over specified time ranges. Generate Pareto charts for alarm counts and timespans. Provide pie charts to visualize alarm timespans. Spare Part Management Display machine-specific spare part details, including part counts and limits. Allow users to add, delete, and reset spare parts. Enable setting warning and critical limits for spare parts. Special Purpose Machines (SPM) Management Manage SPM machine details and parameter states. Display real-time graphs for static and dynamic parameters. Allow position-based queries for laser cladding processes. Analytics Provide machine analytics to track abnormalities over time. Offer maintenance analytics to monitor operator-managed abnormalities. Enable parameter analytics to evaluate specific machine parameters. User Management Register new users with specific roles (Admin, Maintenance, User). Ensure secure user management with restrictions on deleting the admin user. Non-Functional Requirements Scalability The system should handle increasing amounts of data and users without performance degradation. Reliability Ensure high availability and minimal downtime, especially during critical operations. Usability Design an intuitive and user-friendly interface to facilitate ease of use and reduce training time. Security Implement robust security measures to protect sensitive data and ensure user authentication and authorization. Nature of the Current System at TIEI The nature of the current system at TIEI is as follows: Machine The following table gives the summary of available machines at TIEI-TNGA Plant: S.NO Machines Number Of Machines Controller Communication Method 1 General Purpose CNC machines 59 Fanuc MtLinki Mongodb 2 Laser Cladding 1 Nil Log Files 3 Journal Grinding 3 Toypuc Log Files The following table gives the summary of available machines at TIEI-GD Plant: S.NO Machines Number Of Machines Controller Communication Method 1 General Purpose CNC machines 86 Fanuc MtLinki Mongodb Machine Parameters The machine parameters in the TNGA Plant (for the 59 general purpose CNC machines) are split into 17 groups of two types. And the machine parameters in the GD Plant (for the 59 general purpose CNC machines) are split into 19 groups of two types: Static Parameters - These parameters have a single value as their critical limits. For example, the warning limit of encoder temperature could be 50 degrees Celsius, and the critical limit could be 60 degrees Celsius. If any static parameter goes beyond these limits, it is said to be in an abnormal state. Dynamic Parameters - These parameters have a set of values (also known as reference signals). If any new set of values (for a new machining cycle) is not similar to the reference signal, it will be considered to be in an abnormal state. The group of parameters are shown in the tables below. Parameter Groups - TNGA Plant S.No Parameter Group Type 1 APC Battery Static 2 CNC Battery Static 3 Servo and Spindle Motor Temperature Static 4 Encoder Temperature Static 5 Spindle and Servo Motor Insulation Resistance Static 6 CNC Fan Speeds Static 7 Internal Fan 1 Power Supply - Spindle Motor & Spindle Amplifier Static 8 Internal Fan 1 Servo Amplifier Static 9 Internal Fan 1 Power Supply - Servo Motor Static 10 Internal Fan 2 Power Supply - Spindle Motor & Spindle Amplifier Static 11 Internal Fan 2 Servo Amplifier Static 12 Internal Fan 2 Power Supply - Servo Motor Static 13 Battery Zero Separate Detector Static 14 Battery Zero Serial Separate Detector Static 15 Radiator Fan 1 - Servo & Spindle Amplifier Static 16 Radiator Fan 2 - Servo & Spindle Amplifier Static 17 Servo & Spindle Motor Load Dynamic Parameter Groups - GD Plant In addition to the above mentioned parameters, the following parameters were also added for monitoring in the GD Plant. S.No Parameter Group Type 1 CNC Error Position Dynamic 2 Servo & Spindle Motor Speed Dynamic Project Features Machine State Monitoring Comprehensive Status Display : Real-time status of machines, axes, production lines, and parameter groups. Color-Coded Indicators : Visual alerts for critical, warning, and normal states. Real-Time Data Visualization Dynamic Graphs : Real-time graphs for both static and dynamic parameters. Custom Queries : Users can set specific time ranges and parameters for detailed analysis. Alarm Monitoring Detailed Alarm Table : List of alarms for selected machines over a chosen time period. Parito and Pie Charts : Visualization of alarm counts and timespans. Spare Part Management Detailed Spare Part Information : Comprehensive details for each machine's spare parts. Limit Setting and Management : Tools to add, delete, and reset spare parts, with configurable warning and critical limits. Special Purpose Machines (SPM) Management Real-Time Parameter Monitoring : Manage and monitor SPM machine parameters with real-time data. Analytics Machine Analytics : Track and analyze machine abnormalities over time. Maintenance Analytics : Monitor abnormalities managed by different operators. Parameter Analytics : Evaluate and analyze specific machine parameters. User Management User Registration and Roles : Add new users with defined roles and permissions. Secure User Management : Ensure secure handling of user data and restrict deletion of critical admin accounts.","title":"Project Overview"},{"location":"#project-overview-manufacturing-data-management-for-toyota-maintenance","text":"","title":"Project Overview: Manufacturing Data Management for Toyota Maintenance"},{"location":"#introduction","text":"The Manufacturing Data Management (MDM) system is designed to streamline and enhance the maintenance operations for Toyota's two plants: TNGA and GD. This software solution provides comprehensive tools for monitoring, analyzing, and managing the state of various machines, spare parts, and production lines within these plants. By offering real-time data visualization, alarm monitoring, spare part management, and detailed analytics, the MDM system aims to improve operational efficiency, reduce downtime, and facilitate proactive maintenance.","title":"Introduction"},{"location":"#project-requirements","text":"","title":"Project Requirements"},{"location":"#functional-requirements","text":"","title":"Functional Requirements"},{"location":"#machine-state-monitoring","text":"Display the current states of machines, axes, production lines, and parameter groups. Provide real-time visualization of machine parameters. Highlight critical, warning, and normal states with color-coded indicators.","title":"Machine State Monitoring"},{"location":"#real-time-data-visualization","text":"Show real-time graphs for both static and dynamic parameters. Allow users to query data for specific time ranges and parameters. Provide tools to set and adjust warning and critical limits for parameters.","title":"Real-Time Data Visualization"},{"location":"#alarm-monitoring","text":"Maintain a table of alarms for selected machines over specified time ranges. Generate Pareto charts for alarm counts and timespans. Provide pie charts to visualize alarm timespans.","title":"Alarm Monitoring"},{"location":"#spare-part-management","text":"Display machine-specific spare part details, including part counts and limits. Allow users to add, delete, and reset spare parts. Enable setting warning and critical limits for spare parts.","title":"Spare Part Management"},{"location":"#special-purpose-machines-spm-management","text":"Manage SPM machine details and parameter states. Display real-time graphs for static and dynamic parameters. Allow position-based queries for laser cladding processes.","title":"Special Purpose Machines (SPM) Management"},{"location":"#analytics","text":"Provide machine analytics to track abnormalities over time. Offer maintenance analytics to monitor operator-managed abnormalities. Enable parameter analytics to evaluate specific machine parameters.","title":"Analytics"},{"location":"#user-management","text":"Register new users with specific roles (Admin, Maintenance, User). Ensure secure user management with restrictions on deleting the admin user.","title":"User Management"},{"location":"#non-functional-requirements","text":"Scalability The system should handle increasing amounts of data and users without performance degradation. Reliability Ensure high availability and minimal downtime, especially during critical operations. Usability Design an intuitive and user-friendly interface to facilitate ease of use and reduce training time. Security Implement robust security measures to protect sensitive data and ensure user authentication and authorization.","title":"Non-Functional Requirements"},{"location":"#nature-of-the-current-system-at-tiei","text":"The nature of the current system at TIEI is as follows:","title":"Nature of the Current System at TIEI"},{"location":"#machine","text":"The following table gives the summary of available machines at TIEI-TNGA Plant: S.NO Machines Number Of Machines Controller Communication Method 1 General Purpose CNC machines 59 Fanuc MtLinki Mongodb 2 Laser Cladding 1 Nil Log Files 3 Journal Grinding 3 Toypuc Log Files The following table gives the summary of available machines at TIEI-GD Plant: S.NO Machines Number Of Machines Controller Communication Method 1 General Purpose CNC machines 86 Fanuc MtLinki Mongodb","title":"Machine"},{"location":"#machine-parameters","text":"The machine parameters in the TNGA Plant (for the 59 general purpose CNC machines) are split into 17 groups of two types. And the machine parameters in the GD Plant (for the 59 general purpose CNC machines) are split into 19 groups of two types: Static Parameters - These parameters have a single value as their critical limits. For example, the warning limit of encoder temperature could be 50 degrees Celsius, and the critical limit could be 60 degrees Celsius. If any static parameter goes beyond these limits, it is said to be in an abnormal state. Dynamic Parameters - These parameters have a set of values (also known as reference signals). If any new set of values (for a new machining cycle) is not similar to the reference signal, it will be considered to be in an abnormal state. The group of parameters are shown in the tables below.","title":"Machine Parameters"},{"location":"#parameter-groups-tnga-plant","text":"S.No Parameter Group Type 1 APC Battery Static 2 CNC Battery Static 3 Servo and Spindle Motor Temperature Static 4 Encoder Temperature Static 5 Spindle and Servo Motor Insulation Resistance Static 6 CNC Fan Speeds Static 7 Internal Fan 1 Power Supply - Spindle Motor & Spindle Amplifier Static 8 Internal Fan 1 Servo Amplifier Static 9 Internal Fan 1 Power Supply - Servo Motor Static 10 Internal Fan 2 Power Supply - Spindle Motor & Spindle Amplifier Static 11 Internal Fan 2 Servo Amplifier Static 12 Internal Fan 2 Power Supply - Servo Motor Static 13 Battery Zero Separate Detector Static 14 Battery Zero Serial Separate Detector Static 15 Radiator Fan 1 - Servo & Spindle Amplifier Static 16 Radiator Fan 2 - Servo & Spindle Amplifier Static 17 Servo & Spindle Motor Load Dynamic","title":"Parameter Groups - TNGA Plant"},{"location":"#parameter-groups-gd-plant","text":"In addition to the above mentioned parameters, the following parameters were also added for monitoring in the GD Plant. S.No Parameter Group Type 1 CNC Error Position Dynamic 2 Servo & Spindle Motor Speed Dynamic","title":"Parameter Groups - GD Plant"},{"location":"#project-features","text":"","title":"Project Features"},{"location":"#machine-state-monitoring_1","text":"Comprehensive Status Display : Real-time status of machines, axes, production lines, and parameter groups. Color-Coded Indicators : Visual alerts for critical, warning, and normal states.","title":"Machine State Monitoring"},{"location":"#real-time-data-visualization_1","text":"Dynamic Graphs : Real-time graphs for both static and dynamic parameters. Custom Queries : Users can set specific time ranges and parameters for detailed analysis.","title":"Real-Time Data Visualization"},{"location":"#alarm-monitoring_1","text":"Detailed Alarm Table : List of alarms for selected machines over a chosen time period. Parito and Pie Charts : Visualization of alarm counts and timespans.","title":"Alarm Monitoring"},{"location":"#spare-part-management_1","text":"Detailed Spare Part Information : Comprehensive details for each machine's spare parts. Limit Setting and Management : Tools to add, delete, and reset spare parts, with configurable warning and critical limits.","title":"Spare Part Management"},{"location":"#special-purpose-machines-spm-management_1","text":"Real-Time Parameter Monitoring : Manage and monitor SPM machine parameters with real-time data.","title":"Special Purpose Machines (SPM) Management"},{"location":"#analytics_1","text":"Machine Analytics : Track and analyze machine abnormalities over time. Maintenance Analytics : Monitor abnormalities managed by different operators. Parameter Analytics : Evaluate and analyze specific machine parameters.","title":"Analytics"},{"location":"#user-management_1","text":"User Registration and Roles : Add new users with defined roles and permissions. Secure User Management : Ensure secure handling of user data and restrict deletion of critical admin accounts.","title":"User Management"},{"location":"Code%20%26%20Services%20Locations/","text":"Code & Services Location Introduction This section shows the code locations and some of the services names and locations. Code Locations Collector Services Static Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_static_collector.py Service Name static_collector Service File Location (systemctl daemon file) /lib/systemd/system/static_collector.service Dynamic Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_dynamic_collector.py Service Name dynamic_collector Service File Location (systemctl daemon file) /lib/systemd/system/dynamic_collector.service Laser Cladding Collector Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_clad_main_2/laser_clad_main/main.py Service Name laser_cladding_monitoring Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring.service Laser Cladding Collector B Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_cladding_b/laser_clad_main/main.py Service Name laser_cladding_monitoring_b Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring_b.service SPM Journal Grinding Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_spm/codes/laser_clad_main/main_2.py Service Name journal_grinding_jop_X_collector Service File Location JOP 105 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_105_collector.service Service File Location JOP 130 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_130_collector.service Service File Location JOP 140 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_140_collector.service Part Count Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name part_count_collector Service File Location (systemctl daemon file) /etc/systemd/system/part_count_collector.service Email Sender Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name email_sender Service File Location (systemctl daemon file) /etc/systemd/system/email_sender.service Summary Repory Generator Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name report_summary_generator Service File Location (systemctl daemon file) /etc/systemd/system/report_summary_generator.service Back End Services The back end in developed in FastApi and deployed as docker container. The codes are available in github and can be downloaded modified and dockerized to make any new changes. Front End Services Apache Server The front end is developed using html, css, javascript and react. It is being served by apache server. The codes are available in github and can be downloaded modified and build using node package manager and copied to this location (which the apache server will serve) /var/www/tnga_iot","title":"Code & Services Location"},{"location":"Code%20%26%20Services%20Locations/#code-services-location","text":"","title":"Code &amp; Services Location"},{"location":"Code%20%26%20Services%20Locations/#introduction","text":"This section shows the code locations and some of the services names and locations.","title":"Introduction"},{"location":"Code%20%26%20Services%20Locations/#code-locations","text":"","title":"Code Locations"},{"location":"Code%20%26%20Services%20Locations/#collector-services","text":"Static Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_static_collector.py Service Name static_collector Service File Location (systemctl daemon file) /lib/systemd/system/static_collector.service Dynamic Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_dynamic_collector.py Service Name dynamic_collector Service File Location (systemctl daemon file) /lib/systemd/system/dynamic_collector.service Laser Cladding Collector Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_clad_main_2/laser_clad_main/main.py Service Name laser_cladding_monitoring Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring.service Laser Cladding Collector B Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_cladding_b/laser_clad_main/main.py Service Name laser_cladding_monitoring_b Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring_b.service SPM Journal Grinding Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_spm/codes/laser_clad_main/main_2.py Service Name journal_grinding_jop_X_collector Service File Location JOP 105 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_105_collector.service Service File Location JOP 130 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_130_collector.service Service File Location JOP 140 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_140_collector.service Part Count Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name part_count_collector Service File Location (systemctl daemon file) /etc/systemd/system/part_count_collector.service Email Sender Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name email_sender Service File Location (systemctl daemon file) /etc/systemd/system/email_sender.service Summary Repory Generator Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name report_summary_generator Service File Location (systemctl daemon file) /etc/systemd/system/report_summary_generator.service","title":"Collector Services"},{"location":"Code%20%26%20Services%20Locations/#back-end-services","text":"The back end in developed in FastApi and deployed as docker container. The codes are available in github and can be downloaded modified and dockerized to make any new changes.","title":"Back End Services"},{"location":"Code%20%26%20Services%20Locations/#front-end-services","text":"Apache Server The front end is developed using html, css, javascript and react. It is being served by apache server. The codes are available in github and can be downloaded modified and build using node package manager and copied to this location (which the apache server will serve) /var/www/tnga_iot","title":"Front End Services"},{"location":"Technical%20Stack/","text":"Technical Stack Introduction Based on the requirements and nature of the current system, the figure below shows the overall architecture of the proposed solution. flowchart TB subgraph MACHINES direction TB subgraph CNC[General Purpose CNC] end subgraph lc[Laser Cladding] end subgraph jg[Journal Grinding] end end subgraph COLLECTOR direction TB subgraph MtC[MtLinki Collector] end subgraph lcc[Laser Cladding Collector] end subgraph jgc[Journal Grinding Collector] end end subgraph DATABASE end CNC --MONGODB-->MtC lc --LOG FILES-->lcc jg --LOG FILES-->jgc COLLECTOR -->DATABASE DATABASE -->BACKEND BACKEND -->FRONTEND DATABASE -->sum[4/8 HOUR SUMMARY REPORTS] COLLECTOR -->anomaly[ANOMALY DETECTION] anomaly -->abnormal[ABNORMALITY REPORTS] COLLECTOR -->part[PART COUNT MONITOR] part -->abnormal part -->DATABASE abnormal -->email sum --> email[EMAIL ALERTS] Implementation All the requried services are developed using python script and deployed as linux daemon services. There are two plants: TNGA and GDPlant. For the TNGA plant, the implementations are given below. The implementation for GDPlant is the same as TNGA, but it does not include SPM machines. Collectors MtLinki Collector Static Collector - This service collects all new data from the MtLinki mongodb database for the 16 static parameter group. Dynamic Collector - This service collects all new data from the MtLinki mongodb database for the 1 dynamic (servo and spindle load) parameter group. Lasser Cladding Collector - This service collects data from the laser cladding machine from its log files. Journal Grinding Collector - This service collects all new data from the journal grinding machine from its log files. Anomaly Detection The anomaly detection for cnc machines are implemeted as part of the collector services. Static Parameters - The anomaly detection for the 16 parameter groups are part of the static collector service and it works by simply checking if the current value of the parameters are within the normal working range . Dynamic Parameters - The anomaly detection for the 1 parameter group (Servo and Spindle load) are part of the dynamic collector service and it works using Kruskal\u2013Wallis one-way analysis of variance algorithm . This method compares the signal values for a new cycle with a reference signal, for any anomaly. Part Count Monitor The machine part counts (for 59 cnc machines) are monitored from the parameter \"para name\". Once the reset button on the machine controller is pressed, the part count will be reset to zero. But to get a cumulative part count, we store the last part count value before the reset button was pressed, then whenever the part count is increased, the actual part count would be the part count before the press of reset button plus the current part count value. The formula for that is given below: \\[ \\operatorname{} P_{A} = P_{Current} + P_{Cumulative} ....... 1 \\] Where, P A --> Actual Part Count P Current --> Current Part Count P Cumulative --> Cumulative Part Count Before Press of Reset Button Abnormality Reports Different abnormalities are generated as an excel report as soon as they are recorded, and stored in a common location (Where the email alerts service will be looking for new report), these files will be deleted as soon as they are sent as email alerts by the email alerts services. The following things will create an abnormality report: Static Parameter Abnormality - This will be recorded by the static collector as soon as any parameter goes beyond it's normal working range . A sample report is shown below. Dynamic Parameter Abnormality - This will be recorded by the dynamic collector as soon as any set of parameters belonging to a specific cycle is not similar to it's reference signal . A sample report is shown below. Part Count Alert - This will be recorded by the part count monitor as soon as any component of a machine exceeded it's part count limit and needs to be replaced . A sample report is shown below. Database From the requirements and nature of current system, we've choosen timescale db as the database to store all the data. The entity relationship diargrams of all the table of the database is shown below: The details of all the tables are given below: Machine - This table will consist of data related to all the machines available at the new plant (including SPM machines). The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer name Description : The name of the machine. Type : String location Description : The location of the machine within the plant (crank, block, engine line). Type : String machine_number Description : The number of the machine. Type : String short_name Description : A short name for the machine. Type : String description Description : A short description of the machine. Type : String enabled Description : Indicates if the machine is enabled or not. Type : Boolean parameters Description : The total number of parameters this machine has. Type : Integer Unit - This table will consist of data related to all the units of parameters of machines available at the new plant (including SPM machines). The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer name Description : The name of the unit for a machine parameter. Type : String short_name Description : A short name for the unit. Type : String description Description : A short description of the unit. Type : String type Description : To be addressed (TBA). Type : String ParameterGroup - This table will consist of data related to all the groups of parameters (especially for the 59 CNC machines), such as APC battery, encoder temperature, etc. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer group_name Description : The name of the parameter group. Type : String mongodb_query Description : The regex pattern used to wildcard only the parameter names (as available in the Fanuc MtLinki MongoDB) belonging to the parameter group. Used internally by the collector services to query parameters from different groups. Type : String latest_update_time Description : The latest time for which new data was available for the parameter group as a whole. Type : Float warning_limit Description : The warning limit (only available for static parameters). Type : Integer critical_limit Description : The critical limit (only available for static parameters). Type : Integer parameter_type Description : Indicates if the parameter (applicable only for static parameters) is of type increasing or decreasing. Type : String MachineParameter - This table will consist of data related to all the parameters of machines available at the new plant (including SPM machines). The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer name Description : The name of the machine parameter. Type : String machine_id Description : A foreign key referring to the id of Machines table, indicating the machine to which this parameter belongs. Type : Integer internal_parameter_name Description : The internal name of the parameter. Type : String display_name Description : The display name of the parameter. Type : String warning_limit Description : The warning limit (only available for static parameters). Type : Float critical_limit Description : The critical limit (only available for static parameters). Type : Float reference_signal Description : The reference signal that is considered as a good signal for this parameter (only available for dynamic parameters). Type : Array of Float parameter_group_id Description : A foreign key referring to the id column of the ParameterGroup table, representing the parameter group to which this parameter belongs. Type : Integer unit Description : A foreign key referring to the id column of the Unit table, representing the unit this parameter has. Type : Integer parameter_type Description : Indicates if the parameter (applicable only for static parameters) is of type increasing or decreasing. Type : String User - This table will consist of data related to all users registered to access the web application. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer username Description : The username of the user. Type : String email Description : The email id of the user. Type : String full_name Description : The full name of the user. Type : String disabled Description : A boolean variable used to check if the user is enabled or not. Type : Boolean hashed_password Description : The hashed password of the user. Type : String role Description : The role of the user. Type : String company_id Description : The company id the user is associated with. Type : Integer SparePart - This table will consist of data related to all spare parts of all the machines. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer part_name Description : The part name. Type : String referenc_part_number Description : The reference part number of the spare part. Type : String warning_limit Description : The warning part count limit. Type : Integer critical_limit Description : The critical part count limit. Type : Integer machine_id Description : A foreign key referring to the id of Machines table, indicating the machine to which this spare part belongs. Type : Integer MachinePartCount - This table will consist of part count data of all the machines. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer part_signal_name Description : The signal/parameter name which holds the part count for the machine (as stored in the MongoDB). Type : String current_part_count Description : The current part count for the machine. Type : Integer last_reset_count Description : The part count of the machine just before the reset button was pressed, used to find the cumulative part count. Type : Integer machine_id Description : A foreign key referring to the id of Machines table, indicating the machine to which this part count belongs. Type : Integer latest_update_time Description : The most recent timestamp during which the part count was updated (as stored in the MongoDB). Type : Datetime ParameterCondition - This table will consist of data related to all conditions of a parameter, such as OK, warning, and critical. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer name Description : The condition name. Type : String Real_Time_Machine_Parameters - This table will consist of real-time data related to all machines. The details of its columns are given below: time Description : The timestamp of the real-time data. Type : Datetime value Description : The value of the parameter. Type : Float parameter_condition_id Description : A foreign key referring to the id of ParameterCondition table, indicating the condition to which this real-time machine parameter value belongs. Type : Integer machine_parameter_id Description : A foreign key referring to the id of MachineParameter table, indicating the machine parameter to which this record of value belongs. Type : Integer Real_Time_Machine_Parameters_Active - This table will consist of the most recent data related to all machines. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer time Description : The timestamp of the real-time data. Type : Datetime value Description : The value of the parameter. Type : Float parameter_condition_id Description : A foreign key referring to the id of ParameterCondition table, indicating the condition to which this real-time machine parameter value belongs. Type : Integer machine_parameter_id Description : A foreign key referring to the id of MachineParameter table, indicating the machine parameter to which this record of value belongs. Type : Integer Corrective_Activity - This table contains data related to corrective activities for machine parameters. id Description : The prime identifier for any row within this table. Type : Integer machine_parameter Description : A foreign key referring to the id of MachineParameter table. Type : Integer date_of_identification Description : The date when the issue was identified. Type : Datetime latest_occurrence Description : The date of the latest occurrence of the issue. Type : Datetime target_date_of_completion Description : The target date to complete the corrective action. Type : Datetime recent_value Description : The most recent value of the parameter. Type : Float number_of_occurrences Description : The number of times the issue has occurred. Type : Integer corrective_measurement Description : A description of the corrective measures taken in response to an identified issue or problem. Type : String spare_required Description : The spare parts required as part of the corrective action process. Type : String support_needed Description : The type of support or assistance required to address an issue or implement corrective measures effectively. Type : String priority Description : The priority level of the corrective action. Type : String parameter_condition Description : A foreign key referring to the id of ParameterCondition table. Type : Integer responsible_person Description : A foreign key referring to the id of User table. Type : Integer Activities_History - This table contains historical data related to corrective activities for machine parameters. date_of_identification Description : The date when the issue was identified. Type : Datetime machine_parameter Description : A foreign key referring to the id of MachineParameter table. Type : Integer latest_occurrence Description : The date of the latest occurrence of the issue. Type : Datetime target_date_of_completion Description : The target date to complete the corrective action. Type : Datetime actual_date_of_completion Description : The actual date when the corrective action was completed. Type : Datetime number_of_occurrences Description : The number of times the issue has occurred. Type : Integer corrective_measurement Description : A description of the corrective measures taken in response to an identified issue or problem. Type : String spare_required Description : The spare parts required as part of the corrective action process. Type : String support_needed Description : The type of support or assistance required to address an issue or implement corrective measures effectively. Type : String recent_value Description : The most recent value of the parameter. Type : Float parameter_condition Description : A foreign key referring to the id of ParameterCondition table. Type : Integer responsible_person Description : A foreign key referring to the id of User table. Type : Integer Note This is the main table where the recent most value of parameters are stored by all the collector services, for all machines, such as cnc machines, laser cladding, journal grinding. This separate table allows us to optimize the performance while querying the recent most details about all machines, parameter groups, etc. Back End The back end is developed with python and fastapi framework, and ponyorm. The structure of the backend and description of the files and folders are explained in detail in the Code Explanation section. Front End The front end is developed with html, css, javascript and react framework. The structure of the frontend and description of the files and folders are explained in detail in the Code Explanation section.","title":"Technical Stack"},{"location":"Technical%20Stack/#technical-stack","text":"","title":"Technical Stack"},{"location":"Technical%20Stack/#introduction","text":"Based on the requirements and nature of the current system, the figure below shows the overall architecture of the proposed solution. flowchart TB subgraph MACHINES direction TB subgraph CNC[General Purpose CNC] end subgraph lc[Laser Cladding] end subgraph jg[Journal Grinding] end end subgraph COLLECTOR direction TB subgraph MtC[MtLinki Collector] end subgraph lcc[Laser Cladding Collector] end subgraph jgc[Journal Grinding Collector] end end subgraph DATABASE end CNC --MONGODB-->MtC lc --LOG FILES-->lcc jg --LOG FILES-->jgc COLLECTOR -->DATABASE DATABASE -->BACKEND BACKEND -->FRONTEND DATABASE -->sum[4/8 HOUR SUMMARY REPORTS] COLLECTOR -->anomaly[ANOMALY DETECTION] anomaly -->abnormal[ABNORMALITY REPORTS] COLLECTOR -->part[PART COUNT MONITOR] part -->abnormal part -->DATABASE abnormal -->email sum --> email[EMAIL ALERTS]","title":"Introduction"},{"location":"Technical%20Stack/#implementation","text":"All the requried services are developed using python script and deployed as linux daemon services. There are two plants: TNGA and GDPlant. For the TNGA plant, the implementations are given below. The implementation for GDPlant is the same as TNGA, but it does not include SPM machines.","title":"Implementation"},{"location":"Technical%20Stack/#collectors","text":"MtLinki Collector Static Collector - This service collects all new data from the MtLinki mongodb database for the 16 static parameter group. Dynamic Collector - This service collects all new data from the MtLinki mongodb database for the 1 dynamic (servo and spindle load) parameter group. Lasser Cladding Collector - This service collects data from the laser cladding machine from its log files. Journal Grinding Collector - This service collects all new data from the journal grinding machine from its log files.","title":"Collectors"},{"location":"Technical%20Stack/#anomaly-detection","text":"The anomaly detection for cnc machines are implemeted as part of the collector services. Static Parameters - The anomaly detection for the 16 parameter groups are part of the static collector service and it works by simply checking if the current value of the parameters are within the normal working range . Dynamic Parameters - The anomaly detection for the 1 parameter group (Servo and Spindle load) are part of the dynamic collector service and it works using Kruskal\u2013Wallis one-way analysis of variance algorithm . This method compares the signal values for a new cycle with a reference signal, for any anomaly.","title":"Anomaly Detection"},{"location":"Technical%20Stack/#part-count-monitor","text":"The machine part counts (for 59 cnc machines) are monitored from the parameter \"para name\". Once the reset button on the machine controller is pressed, the part count will be reset to zero. But to get a cumulative part count, we store the last part count value before the reset button was pressed, then whenever the part count is increased, the actual part count would be the part count before the press of reset button plus the current part count value. The formula for that is given below: \\[ \\operatorname{} P_{A} = P_{Current} + P_{Cumulative} ....... 1 \\] Where, P A --> Actual Part Count P Current --> Current Part Count P Cumulative --> Cumulative Part Count Before Press of Reset Button","title":"Part Count Monitor"},{"location":"Technical%20Stack/#abnormality-reports","text":"Different abnormalities are generated as an excel report as soon as they are recorded, and stored in a common location (Where the email alerts service will be looking for new report), these files will be deleted as soon as they are sent as email alerts by the email alerts services. The following things will create an abnormality report: Static Parameter Abnormality - This will be recorded by the static collector as soon as any parameter goes beyond it's normal working range . A sample report is shown below. Dynamic Parameter Abnormality - This will be recorded by the dynamic collector as soon as any set of parameters belonging to a specific cycle is not similar to it's reference signal . A sample report is shown below. Part Count Alert - This will be recorded by the part count monitor as soon as any component of a machine exceeded it's part count limit and needs to be replaced . A sample report is shown below.","title":"Abnormality Reports"},{"location":"Technical%20Stack/#database","text":"From the requirements and nature of current system, we've choosen timescale db as the database to store all the data. The entity relationship diargrams of all the table of the database is shown below: The details of all the tables are given below: Machine - This table will consist of data related to all the machines available at the new plant (including SPM machines). The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer name Description : The name of the machine. Type : String location Description : The location of the machine within the plant (crank, block, engine line). Type : String machine_number Description : The number of the machine. Type : String short_name Description : A short name for the machine. Type : String description Description : A short description of the machine. Type : String enabled Description : Indicates if the machine is enabled or not. Type : Boolean parameters Description : The total number of parameters this machine has. Type : Integer Unit - This table will consist of data related to all the units of parameters of machines available at the new plant (including SPM machines). The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer name Description : The name of the unit for a machine parameter. Type : String short_name Description : A short name for the unit. Type : String description Description : A short description of the unit. Type : String type Description : To be addressed (TBA). Type : String ParameterGroup - This table will consist of data related to all the groups of parameters (especially for the 59 CNC machines), such as APC battery, encoder temperature, etc. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer group_name Description : The name of the parameter group. Type : String mongodb_query Description : The regex pattern used to wildcard only the parameter names (as available in the Fanuc MtLinki MongoDB) belonging to the parameter group. Used internally by the collector services to query parameters from different groups. Type : String latest_update_time Description : The latest time for which new data was available for the parameter group as a whole. Type : Float warning_limit Description : The warning limit (only available for static parameters). Type : Integer critical_limit Description : The critical limit (only available for static parameters). Type : Integer parameter_type Description : Indicates if the parameter (applicable only for static parameters) is of type increasing or decreasing. Type : String MachineParameter - This table will consist of data related to all the parameters of machines available at the new plant (including SPM machines). The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer name Description : The name of the machine parameter. Type : String machine_id Description : A foreign key referring to the id of Machines table, indicating the machine to which this parameter belongs. Type : Integer internal_parameter_name Description : The internal name of the parameter. Type : String display_name Description : The display name of the parameter. Type : String warning_limit Description : The warning limit (only available for static parameters). Type : Float critical_limit Description : The critical limit (only available for static parameters). Type : Float reference_signal Description : The reference signal that is considered as a good signal for this parameter (only available for dynamic parameters). Type : Array of Float parameter_group_id Description : A foreign key referring to the id column of the ParameterGroup table, representing the parameter group to which this parameter belongs. Type : Integer unit Description : A foreign key referring to the id column of the Unit table, representing the unit this parameter has. Type : Integer parameter_type Description : Indicates if the parameter (applicable only for static parameters) is of type increasing or decreasing. Type : String User - This table will consist of data related to all users registered to access the web application. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer username Description : The username of the user. Type : String email Description : The email id of the user. Type : String full_name Description : The full name of the user. Type : String disabled Description : A boolean variable used to check if the user is enabled or not. Type : Boolean hashed_password Description : The hashed password of the user. Type : String role Description : The role of the user. Type : String company_id Description : The company id the user is associated with. Type : Integer SparePart - This table will consist of data related to all spare parts of all the machines. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer part_name Description : The part name. Type : String referenc_part_number Description : The reference part number of the spare part. Type : String warning_limit Description : The warning part count limit. Type : Integer critical_limit Description : The critical part count limit. Type : Integer machine_id Description : A foreign key referring to the id of Machines table, indicating the machine to which this spare part belongs. Type : Integer MachinePartCount - This table will consist of part count data of all the machines. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer part_signal_name Description : The signal/parameter name which holds the part count for the machine (as stored in the MongoDB). Type : String current_part_count Description : The current part count for the machine. Type : Integer last_reset_count Description : The part count of the machine just before the reset button was pressed, used to find the cumulative part count. Type : Integer machine_id Description : A foreign key referring to the id of Machines table, indicating the machine to which this part count belongs. Type : Integer latest_update_time Description : The most recent timestamp during which the part count was updated (as stored in the MongoDB). Type : Datetime ParameterCondition - This table will consist of data related to all conditions of a parameter, such as OK, warning, and critical. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer name Description : The condition name. Type : String Real_Time_Machine_Parameters - This table will consist of real-time data related to all machines. The details of its columns are given below: time Description : The timestamp of the real-time data. Type : Datetime value Description : The value of the parameter. Type : Float parameter_condition_id Description : A foreign key referring to the id of ParameterCondition table, indicating the condition to which this real-time machine parameter value belongs. Type : Integer machine_parameter_id Description : A foreign key referring to the id of MachineParameter table, indicating the machine parameter to which this record of value belongs. Type : Integer Real_Time_Machine_Parameters_Active - This table will consist of the most recent data related to all machines. The details of its columns are given below: id Description : The prime identifier for any row within this table. Type : Integer time Description : The timestamp of the real-time data. Type : Datetime value Description : The value of the parameter. Type : Float parameter_condition_id Description : A foreign key referring to the id of ParameterCondition table, indicating the condition to which this real-time machine parameter value belongs. Type : Integer machine_parameter_id Description : A foreign key referring to the id of MachineParameter table, indicating the machine parameter to which this record of value belongs. Type : Integer Corrective_Activity - This table contains data related to corrective activities for machine parameters. id Description : The prime identifier for any row within this table. Type : Integer machine_parameter Description : A foreign key referring to the id of MachineParameter table. Type : Integer date_of_identification Description : The date when the issue was identified. Type : Datetime latest_occurrence Description : The date of the latest occurrence of the issue. Type : Datetime target_date_of_completion Description : The target date to complete the corrective action. Type : Datetime recent_value Description : The most recent value of the parameter. Type : Float number_of_occurrences Description : The number of times the issue has occurred. Type : Integer corrective_measurement Description : A description of the corrective measures taken in response to an identified issue or problem. Type : String spare_required Description : The spare parts required as part of the corrective action process. Type : String support_needed Description : The type of support or assistance required to address an issue or implement corrective measures effectively. Type : String priority Description : The priority level of the corrective action. Type : String parameter_condition Description : A foreign key referring to the id of ParameterCondition table. Type : Integer responsible_person Description : A foreign key referring to the id of User table. Type : Integer Activities_History - This table contains historical data related to corrective activities for machine parameters. date_of_identification Description : The date when the issue was identified. Type : Datetime machine_parameter Description : A foreign key referring to the id of MachineParameter table. Type : Integer latest_occurrence Description : The date of the latest occurrence of the issue. Type : Datetime target_date_of_completion Description : The target date to complete the corrective action. Type : Datetime actual_date_of_completion Description : The actual date when the corrective action was completed. Type : Datetime number_of_occurrences Description : The number of times the issue has occurred. Type : Integer corrective_measurement Description : A description of the corrective measures taken in response to an identified issue or problem. Type : String spare_required Description : The spare parts required as part of the corrective action process. Type : String support_needed Description : The type of support or assistance required to address an issue or implement corrective measures effectively. Type : String recent_value Description : The most recent value of the parameter. Type : Float parameter_condition Description : A foreign key referring to the id of ParameterCondition table. Type : Integer responsible_person Description : A foreign key referring to the id of User table. Type : Integer Note This is the main table where the recent most value of parameters are stored by all the collector services, for all machines, such as cnc machines, laser cladding, journal grinding. This separate table allows us to optimize the performance while querying the recent most details about all machines, parameter groups, etc.","title":"Database"},{"location":"Technical%20Stack/#back-end","text":"The back end is developed with python and fastapi framework, and ponyorm. The structure of the backend and description of the files and folders are explained in detail in the Code Explanation section.","title":"Back End"},{"location":"Technical%20Stack/#front-end","text":"The front end is developed with html, css, javascript and react framework. The structure of the frontend and description of the files and folders are explained in detail in the Code Explanation section.","title":"Front End"},{"location":"Troubleshoot_Faq/","text":"Troubleshooting & FAQ Introduction This section shows some of the common problems that you might face, and how to quickly solve them. How to restart services (and check it status)?? Check the Status The following code can be used to check the status of any service systemctl status static_collector You could replace the static_collector with the service you want to check. The following images shows the result of using that command You shall press ctrl + c to get back your terminal from the service status (if required). Restart the Service The following code can be used to restart any service systemctl restart static_collector You could replace the static_collector with the service you want to restart. Tip Once in a while you can check the status of all services, or if in case there is any issue you can check all the services and try restarting any service that is inactive/dead. If nothing else works, you can always contact CMTI, We're happy to help! \ud83d\ude03 \ud83e\udd1d\ud83c\udffb","title":"Troubleshooting & FAQ"},{"location":"Troubleshoot_Faq/#troubleshooting-faq","text":"","title":"Troubleshooting &amp; FAQ"},{"location":"Troubleshoot_Faq/#introduction","text":"This section shows some of the common problems that you might face, and how to quickly solve them.","title":"Introduction"},{"location":"Troubleshoot_Faq/#how-to-restart-services-and-check-it-status","text":"","title":"How to restart services (and check it status)??"},{"location":"Troubleshoot_Faq/#check-the-status","text":"The following code can be used to check the status of any service systemctl status static_collector You could replace the static_collector with the service you want to check. The following images shows the result of using that command You shall press ctrl + c to get back your terminal from the service status (if required).","title":"Check the Status"},{"location":"Troubleshoot_Faq/#restart-the-service","text":"The following code can be used to restart any service systemctl restart static_collector You could replace the static_collector with the service you want to restart. Tip Once in a while you can check the status of all services, or if in case there is any issue you can check all the services and try restarting any service that is inactive/dead. If nothing else works, you can always contact CMTI, We're happy to help! \ud83d\ude03 \ud83e\udd1d\ud83c\udffb","title":"Restart the Service"},{"location":"user_interfaces/","text":"User Interface This section gives the details about the user interface for the implemented solution. It gives details about all the functionalities of available features and steps to carry out certain tasks. Maintenance Section There are two plants in total: TNGA and GD plant. The user interface remains the same for both plants, but the only difference is that the SPM section and the spare part count sections are not there in the GD plant. There are two sections within the maintenance section: A section to show the states of all parameter groups, production line, machine, and its parameters. A section that shows the real-time data (time vs. axis/parameter). This can be accessed by clicking on the axis (tiny rectangular box within the machine information card). Machine State Page The screens that show the states of different elements are shown below. This section shows the machine state of the general-purpose CNC machines. The main element on the screen is your information card for the machines (rectangular box). It has two sets of attributes: Machine Name - This represents the full name of the machine, such as OP180A (without the production line name). Parameter/Axis Name - The different axes are represented by the smaller rectangular box within the information card right below the machine name; they typically consist of 1, 2, or 3 letter symbols. Each of the machines is grouped based on the production line such as head, crank, and block. This screen shows four types of states: Machine Level State - Each of the machines (as represented by the rectangular information box) will change its color based upon the current state of all the parameters/axes it has. Axis Level State - Each of the machine axes (as represented by the smaller rectangular information box) will change its color based upon its current state. Line Level State - Each of the production lines (as represented by the bigger and transparent rectangular information box) will change its color based upon the current state of all the machines in its production line. Parameter Group Level State - Each of the parameter groups (as represented by the rectangular information box at the bottom of the page) will change its color based upon the state of the machines in a particular group such as encoder temperature. For all the above states, red represents a critical state, yellow represents a warning state, and green represents a normal state. The different sub-sections of this maintenance section are explained below (as numbered in the image above): Parameter Name : This shows the parameter group name, such as encoder temperature, APC battery, etc. Machine State Summary : This shows the summary of the states of all machines, it gives the total number of machines in the three different states. Current Section Selected : This shows the current section (of the web application) that is selected. Parameter/Axis State : This shows the current state of the parameter/axis (Critical). Machine State Information Card : This shows the current status of the machine. Line State Information Card : This shows the name of the production line. Line State Information Card : This shows the current state of the production line. Parameter Group State Summary : This shows the current state of the different parameter groups that belong to the machine. Real Time Graph The screens that show the real-time data (for static parameter) are shown below The different sub-sections of this maintenance section are explained below (as numbered in the image above) Machine Name : This shows the machine name. Parameter Group : This shows the parameter group name. Parameter Name : This shows the production line, axis/parameter name. Warning Limit : This shows the current warning limit of this parameter. This is the button used to set/change the warning limit for the current parameter. Critical Limit : This shows the current critical limit of this parameter. This is the button used to set/change the critical limit for the current parameter. Start Time Query Selector : This is used to select the start time of your query to get the real-time data. End Time Query Selector : This is used to select the end time of your query to get the real-time data. Submit Button : This is the button used to submit your query for real-time data. View Activity : For the specific parameter, you can view the recent activity. Detailed Graph Information Card : This information card shows the x and y axis names, units, and the current value of x and y axis when you hover the mouse over the graph. Graph Title : This shows the title of the graph. Note If data is not available for the given time range, the most recent available data is given. Only in the case where the parameter has no data recorded ever, it will throw a warning. The screens that shows the real time data (for dynamic parameter) is shown below The different sub sections of this maintenace section is explained below (as numbered in the image above) Add/Edit Limits : This button is used to add (new or remove and replace existing) or append (to already existing) reference signal to the dynamic parameter. Alarm Monitoring Section There section has one table to give the list of alarms for the selected machine in given time range, and three graphs: Alarm Count Vs Alarms - This shows a parito graph between the total count of alarms and the alarm (name), for the selected machine and time range. Alarm Timespan Vs Alarms - This shows a parito graph between the total time (in seconds) of alarms and the alarm (name), for the selected machine and time range. Alarm Timespans - This shows a pi chart of the different alarms according to their total alarm timespan in seconds. Alarm Table The screens that shows the alarm table is shown below The different sub sections of this section is explained below (as numbered in the image above) Page Name : This shows the title of the page (Alarm Monitoring). Machine Selection : This drop down box allows you to select the list of available machines Date Query Type : This drop down box allows you to select the type of date query, such as last day, week, month or custom range. Start Time Query Selector : This is used to select the start time of your query to get the alarm data. End Time Query Selector : This is used to select the end time of your query to get the alarm time data. Query Submit Button : This is the button used to submit your query for alarm data. Table Name : This shows the title of the table. Pagnation Selector : This button allows the user to select the number of rows to be displayed in the table and the page number. Partio Graphs The screens that shows the partio graphs for the Alarm Count Vs Alarms and Alarm Timespan Vs Alarms are shown below The different sub sections of this section is explained below (as numbered in the image above) Graph Name : This shows the title of the graph. Hide/Reveal Button : This button is used to hide or reveal the graph. Legend : This shows the legend of the graph. Pi Chart The screens that shows the pi chart for the Alarm Timespan are shown below: The different sub sections of this section is explained below (as numbered in the image above) Graph Name : This shows the title of the graph. Hide/Reveal Button : This button is used to hide or reveal the graph. Legend : This shows the legend of the graph. Spare Part Management This section is used for spare part management, it has two views: Machine Details - This shows information card for all available machines and has a details button, which can be clicked to view the current status of it's spare part count. Machine Specific Spare Part Details - This shows all the available spare parts for the machine, it's current part count and part count of the spare parts. All Machine Status The screens that shows the machine details is shown below The different sub sections of this section is explained below (as numbered in the image above) Factory Summary : This shows Summary the page (Alarm Monitoring). Production Line Name : This shows the production line number. Machine Details : This shows the details of the machine. The different color represents the state of the machine, where warning / critical means any one or more of the spare parts of the machine has reached the limit and needs to be replaced. Machine Specific Spare Part Details The screens that shows the spare part details for a selected machine is shown below The different sub sections of this section is explained below (as numbered in the image above) Machine Name : This shows the prorduction line, machine name. Cumulative Part Count : This shows the total/cumulative part count of the machine (irrespective of the number of times the reset button was pressed in the machine). Current Part Count : This shows the current part count of the machine after the reset button was pressed. Lock/Unlock Button : This button is used to lock and unlock the modification of the spare part, to avoid accidental changes. This has be unlocked before resetting the spare part count. Add Part Button : This button is used to create a new spare part for the machine. Spare Part Warning Limit : This shows the warning limit for the spare part. Spare Part Critical Limit : This shows the critical limit for the spare part. The screens that shows the spare part details for a selected machine after unlocking the table is shown below The different sub sections of this section is explained below (as numbered in the image above) Delete Spare Part Button : This button is used to delete the spare part from the database. Current Spare Part Count : This shows the number of parts produced by the machine (irrespective of the number of time the reset button was pressed, since it take the cumulative value) since the spare part was created in the front end or since the reset button was pressed. Spare Part Counter Reset Button : This button is used to reset the spare part count (to zero). This should be used once the part has been replaced in the machine. Spare Part Warning Limit : This button can be used to set the warning limit for this spare part (activated only after the table is unlocked). Spare Part Critical Limit : This button can be used to set the critical limit for this spare part (activated only after the table is unlocked). SPM Machines This section is used for management of SPM machines, it has two views: All SPM Machine Details This shows information card for all available SPM machines and has a details button, Where one can view the current status of its parameters as shown in the above image. The information card is highlighted in different colors (green ,orange, red) corresponding to it's (it's parameters) state.The different sub sections of this section is explained below (as numbered in the image above): Machine Name : This shows the machine name. Parameter Name : This shows the Parameter name. Machine Status : This shows the machine Status, along with its status (color coded) Machine Specific Details This shows the real time graph for the spm. It can display three information Static Parameter - All the parameters (both static and dynamic) are combined under parameters section, the static parameters will have critical and warning limits. The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below). Switch Button : This is the switch button between the Postion graph and the Time-Series Graph. Machine Name : This shows the machine name. Limit Setter(Warning) : This shows the current limits, and also allows the user to set the limits. Limit Setter (Critical) : This shows the current limits, and also allows the user to set the limits. Machine Parameter : This shows the parameter name, and it's condition (color coded by the box below the parameter name), there is a small check box (to the left of the parameter name) that allows the user to select the parameter that needs to be displayed. Start Time Query Selector : This is used to select the start time of your query to get the Postion/Time-series data. End Time Query Selector : This is used to select the end time of your query to get the Postion/Time-series data. Query Submitter : This shows button is used to submit a real time data query. Legend : This shows the legend for the graph, (as the user hovers over the graph, the values will be displayed over here) Dynamic Parameter - All the parameters (both static and dynamic) are combined under parameters section, the dynamic parameters will have button to add edit reference signal. The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below) Add/Edit Limits : This button is used to add (new or remove and replace existing) or append (to already existing) reference signal to the dynamic parameter. Position Based Query - The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below) Switch Button : This is the switch button between the Postion graph and the Time-Series Graph. Machine Name : This shows the machine name. Part Number Search : Here the user can search for the specific part number and select the same for the Graph. Machine Parameter : This shows the parameter name, and it's condition (color coded by the box below the parameter name), there is a small check box (to the left of the parameter name) that allows the user to select the parameter that needs to be displayed. Part Number Selection : Here the user can select the specific part number (upto 3 part numbers) and get the Graph for the same. Start Time Query Selector : This is used to select the start time of your query to get the Postion/Time-series data. End Time Query Selector : This is used to select the end time of your query to get the Postion/Time-series data. Query Submitter : This shows button is used to submit a real time data query. Note This screen is applicable only for laser cladding. Analytics This section is used for the management and analysis of various aspects of the machines in the plant. It has three main subsections: Machine Analytics, Maintenance Analytics, and Parameter Analytics. Each subsection allows users to filter data by date and other parameters to generate relevant reports and visualizations. Machine Analytics This subsection allows users to analyze the abnormalities related to specific machines over a selected time period. Machine Name : This input field allows users to specify the machine they want to analyze. From Date : Users can set the starting date and time for the analysis period. To Date : Users can set the ending date and time for the analysis period. Submit Button : After setting the machine name and date range, users click this button to generate the report. Chart : The generated chart displays the \"Machine Vs Abnormality Count,\" showing total abnormalities, warnings, and critical issues for the selected machine within the specified date range. Maintenance Analytics This subsection provides insights into the maintenance-related abnormalities managed by different operators over a selected time period. From Date : Users can set the starting date and time for the analysis period. To Date : Users can set the ending date and time for the analysis period. Submit Button : After setting the date range, users click this button to generate the report. Chart : The generated chart displays the \"Operator Vs Abnormality Count,\" showing the total number of abnormalities managed by different operators within the specified date range. Parameter Analytics This subsection allows users to analyze abnormalities related to specific machine parameters over a selected time period. Parameter Group : This input field allows users to specify the parameter group they want to analyze. From Date : Users can set the starting date and time for the analysis period. To Date : Users can set the ending date and time for the analysis period. Submit Button : After setting the parameter group and date range, users click this button to generate the report. Chart : The generated chart displays the \"Parameter Vs Abnormality Count,\" showing total abnormalities, warnings, and critical issues for the selected parameter group within the specified date range. Each of these subsections provides a detailed visualization of the selected data, helping users to identify trends, issues, and areas needing attention within their plant operations. User Management This section is used for user management: The screens that shows the user details is shown below The different sub sections of this section is explained below (as numbered in the image above) Add User Form : This is the user registration form used to add new user to the database with his ROLE(Admin, Mantainance , User). Note The admin user \"cmti\" cannot be deleted, for safety purposes.","title":"User Interface"},{"location":"user_interfaces/#user-interface","text":"This section gives the details about the user interface for the implemented solution. It gives details about all the functionalities of available features and steps to carry out certain tasks.","title":"User Interface"},{"location":"user_interfaces/#maintenance-section","text":"There are two plants in total: TNGA and GD plant. The user interface remains the same for both plants, but the only difference is that the SPM section and the spare part count sections are not there in the GD plant. There are two sections within the maintenance section: A section to show the states of all parameter groups, production line, machine, and its parameters. A section that shows the real-time data (time vs. axis/parameter). This can be accessed by clicking on the axis (tiny rectangular box within the machine information card).","title":"Maintenance Section"},{"location":"user_interfaces/#machine-state-page","text":"The screens that show the states of different elements are shown below. This section shows the machine state of the general-purpose CNC machines. The main element on the screen is your information card for the machines (rectangular box). It has two sets of attributes: Machine Name - This represents the full name of the machine, such as OP180A (without the production line name). Parameter/Axis Name - The different axes are represented by the smaller rectangular box within the information card right below the machine name; they typically consist of 1, 2, or 3 letter symbols. Each of the machines is grouped based on the production line such as head, crank, and block. This screen shows four types of states: Machine Level State - Each of the machines (as represented by the rectangular information box) will change its color based upon the current state of all the parameters/axes it has. Axis Level State - Each of the machine axes (as represented by the smaller rectangular information box) will change its color based upon its current state. Line Level State - Each of the production lines (as represented by the bigger and transparent rectangular information box) will change its color based upon the current state of all the machines in its production line. Parameter Group Level State - Each of the parameter groups (as represented by the rectangular information box at the bottom of the page) will change its color based upon the state of the machines in a particular group such as encoder temperature. For all the above states, red represents a critical state, yellow represents a warning state, and green represents a normal state. The different sub-sections of this maintenance section are explained below (as numbered in the image above): Parameter Name : This shows the parameter group name, such as encoder temperature, APC battery, etc. Machine State Summary : This shows the summary of the states of all machines, it gives the total number of machines in the three different states. Current Section Selected : This shows the current section (of the web application) that is selected. Parameter/Axis State : This shows the current state of the parameter/axis (Critical). Machine State Information Card : This shows the current status of the machine. Line State Information Card : This shows the name of the production line. Line State Information Card : This shows the current state of the production line. Parameter Group State Summary : This shows the current state of the different parameter groups that belong to the machine.","title":"Machine State Page"},{"location":"user_interfaces/#real-time-graph","text":"The screens that show the real-time data (for static parameter) are shown below The different sub-sections of this maintenance section are explained below (as numbered in the image above) Machine Name : This shows the machine name. Parameter Group : This shows the parameter group name. Parameter Name : This shows the production line, axis/parameter name. Warning Limit : This shows the current warning limit of this parameter. This is the button used to set/change the warning limit for the current parameter. Critical Limit : This shows the current critical limit of this parameter. This is the button used to set/change the critical limit for the current parameter. Start Time Query Selector : This is used to select the start time of your query to get the real-time data. End Time Query Selector : This is used to select the end time of your query to get the real-time data. Submit Button : This is the button used to submit your query for real-time data. View Activity : For the specific parameter, you can view the recent activity. Detailed Graph Information Card : This information card shows the x and y axis names, units, and the current value of x and y axis when you hover the mouse over the graph. Graph Title : This shows the title of the graph. Note If data is not available for the given time range, the most recent available data is given. Only in the case where the parameter has no data recorded ever, it will throw a warning. The screens that shows the real time data (for dynamic parameter) is shown below The different sub sections of this maintenace section is explained below (as numbered in the image above) Add/Edit Limits : This button is used to add (new or remove and replace existing) or append (to already existing) reference signal to the dynamic parameter.","title":"Real Time Graph"},{"location":"user_interfaces/#alarm-monitoring-section","text":"There section has one table to give the list of alarms for the selected machine in given time range, and three graphs: Alarm Count Vs Alarms - This shows a parito graph between the total count of alarms and the alarm (name), for the selected machine and time range. Alarm Timespan Vs Alarms - This shows a parito graph between the total time (in seconds) of alarms and the alarm (name), for the selected machine and time range. Alarm Timespans - This shows a pi chart of the different alarms according to their total alarm timespan in seconds.","title":"Alarm Monitoring Section"},{"location":"user_interfaces/#alarm-table","text":"The screens that shows the alarm table is shown below The different sub sections of this section is explained below (as numbered in the image above) Page Name : This shows the title of the page (Alarm Monitoring). Machine Selection : This drop down box allows you to select the list of available machines Date Query Type : This drop down box allows you to select the type of date query, such as last day, week, month or custom range. Start Time Query Selector : This is used to select the start time of your query to get the alarm data. End Time Query Selector : This is used to select the end time of your query to get the alarm time data. Query Submit Button : This is the button used to submit your query for alarm data. Table Name : This shows the title of the table. Pagnation Selector : This button allows the user to select the number of rows to be displayed in the table and the page number.","title":"Alarm Table"},{"location":"user_interfaces/#partio-graphs","text":"The screens that shows the partio graphs for the Alarm Count Vs Alarms and Alarm Timespan Vs Alarms are shown below The different sub sections of this section is explained below (as numbered in the image above) Graph Name : This shows the title of the graph. Hide/Reveal Button : This button is used to hide or reveal the graph. Legend : This shows the legend of the graph.","title":"Partio Graphs"},{"location":"user_interfaces/#pi-chart","text":"The screens that shows the pi chart for the Alarm Timespan are shown below: The different sub sections of this section is explained below (as numbered in the image above) Graph Name : This shows the title of the graph. Hide/Reveal Button : This button is used to hide or reveal the graph. Legend : This shows the legend of the graph.","title":"Pi Chart"},{"location":"user_interfaces/#spare-part-management","text":"This section is used for spare part management, it has two views: Machine Details - This shows information card for all available machines and has a details button, which can be clicked to view the current status of it's spare part count. Machine Specific Spare Part Details - This shows all the available spare parts for the machine, it's current part count and part count of the spare parts.","title":"Spare Part Management"},{"location":"user_interfaces/#all-machine-status","text":"The screens that shows the machine details is shown below The different sub sections of this section is explained below (as numbered in the image above) Factory Summary : This shows Summary the page (Alarm Monitoring). Production Line Name : This shows the production line number. Machine Details : This shows the details of the machine. The different color represents the state of the machine, where warning / critical means any one or more of the spare parts of the machine has reached the limit and needs to be replaced.","title":"All Machine Status"},{"location":"user_interfaces/#machine-specific-spare-part-details","text":"The screens that shows the spare part details for a selected machine is shown below The different sub sections of this section is explained below (as numbered in the image above) Machine Name : This shows the prorduction line, machine name. Cumulative Part Count : This shows the total/cumulative part count of the machine (irrespective of the number of times the reset button was pressed in the machine). Current Part Count : This shows the current part count of the machine after the reset button was pressed. Lock/Unlock Button : This button is used to lock and unlock the modification of the spare part, to avoid accidental changes. This has be unlocked before resetting the spare part count. Add Part Button : This button is used to create a new spare part for the machine. Spare Part Warning Limit : This shows the warning limit for the spare part. Spare Part Critical Limit : This shows the critical limit for the spare part. The screens that shows the spare part details for a selected machine after unlocking the table is shown below The different sub sections of this section is explained below (as numbered in the image above) Delete Spare Part Button : This button is used to delete the spare part from the database. Current Spare Part Count : This shows the number of parts produced by the machine (irrespective of the number of time the reset button was pressed, since it take the cumulative value) since the spare part was created in the front end or since the reset button was pressed. Spare Part Counter Reset Button : This button is used to reset the spare part count (to zero). This should be used once the part has been replaced in the machine. Spare Part Warning Limit : This button can be used to set the warning limit for this spare part (activated only after the table is unlocked). Spare Part Critical Limit : This button can be used to set the critical limit for this spare part (activated only after the table is unlocked).","title":"Machine Specific Spare Part Details"},{"location":"user_interfaces/#spm-machines","text":"This section is used for management of SPM machines, it has two views:","title":"SPM Machines"},{"location":"user_interfaces/#all-spm-machine-details","text":"This shows information card for all available SPM machines and has a details button, Where one can view the current status of its parameters as shown in the above image. The information card is highlighted in different colors (green ,orange, red) corresponding to it's (it's parameters) state.The different sub sections of this section is explained below (as numbered in the image above): Machine Name : This shows the machine name. Parameter Name : This shows the Parameter name. Machine Status : This shows the machine Status, along with its status (color coded)","title":"All SPM Machine Details"},{"location":"user_interfaces/#machine-specific-details","text":"This shows the real time graph for the spm. It can display three information Static Parameter - All the parameters (both static and dynamic) are combined under parameters section, the static parameters will have critical and warning limits. The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below). Switch Button : This is the switch button between the Postion graph and the Time-Series Graph. Machine Name : This shows the machine name. Limit Setter(Warning) : This shows the current limits, and also allows the user to set the limits. Limit Setter (Critical) : This shows the current limits, and also allows the user to set the limits. Machine Parameter : This shows the parameter name, and it's condition (color coded by the box below the parameter name), there is a small check box (to the left of the parameter name) that allows the user to select the parameter that needs to be displayed. Start Time Query Selector : This is used to select the start time of your query to get the Postion/Time-series data. End Time Query Selector : This is used to select the end time of your query to get the Postion/Time-series data. Query Submitter : This shows button is used to submit a real time data query. Legend : This shows the legend for the graph, (as the user hovers over the graph, the values will be displayed over here) Dynamic Parameter - All the parameters (both static and dynamic) are combined under parameters section, the dynamic parameters will have button to add edit reference signal. The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below) Add/Edit Limits : This button is used to add (new or remove and replace existing) or append (to already existing) reference signal to the dynamic parameter. Position Based Query - The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below) Switch Button : This is the switch button between the Postion graph and the Time-Series Graph. Machine Name : This shows the machine name. Part Number Search : Here the user can search for the specific part number and select the same for the Graph. Machine Parameter : This shows the parameter name, and it's condition (color coded by the box below the parameter name), there is a small check box (to the left of the parameter name) that allows the user to select the parameter that needs to be displayed. Part Number Selection : Here the user can select the specific part number (upto 3 part numbers) and get the Graph for the same. Start Time Query Selector : This is used to select the start time of your query to get the Postion/Time-series data. End Time Query Selector : This is used to select the end time of your query to get the Postion/Time-series data. Query Submitter : This shows button is used to submit a real time data query. Note This screen is applicable only for laser cladding.","title":"Machine Specific Details"},{"location":"user_interfaces/#analytics","text":"This section is used for the management and analysis of various aspects of the machines in the plant. It has three main subsections: Machine Analytics, Maintenance Analytics, and Parameter Analytics. Each subsection allows users to filter data by date and other parameters to generate relevant reports and visualizations.","title":"Analytics"},{"location":"user_interfaces/#machine-analytics","text":"This subsection allows users to analyze the abnormalities related to specific machines over a selected time period. Machine Name : This input field allows users to specify the machine they want to analyze. From Date : Users can set the starting date and time for the analysis period. To Date : Users can set the ending date and time for the analysis period. Submit Button : After setting the machine name and date range, users click this button to generate the report. Chart : The generated chart displays the \"Machine Vs Abnormality Count,\" showing total abnormalities, warnings, and critical issues for the selected machine within the specified date range.","title":"Machine Analytics"},{"location":"user_interfaces/#maintenance-analytics","text":"This subsection provides insights into the maintenance-related abnormalities managed by different operators over a selected time period. From Date : Users can set the starting date and time for the analysis period. To Date : Users can set the ending date and time for the analysis period. Submit Button : After setting the date range, users click this button to generate the report. Chart : The generated chart displays the \"Operator Vs Abnormality Count,\" showing the total number of abnormalities managed by different operators within the specified date range.","title":"Maintenance Analytics"},{"location":"user_interfaces/#parameter-analytics","text":"This subsection allows users to analyze abnormalities related to specific machine parameters over a selected time period. Parameter Group : This input field allows users to specify the parameter group they want to analyze. From Date : Users can set the starting date and time for the analysis period. To Date : Users can set the ending date and time for the analysis period. Submit Button : After setting the parameter group and date range, users click this button to generate the report. Chart : The generated chart displays the \"Parameter Vs Abnormality Count,\" showing total abnormalities, warnings, and critical issues for the selected parameter group within the specified date range. Each of these subsections provides a detailed visualization of the selected data, helping users to identify trends, issues, and areas needing attention within their plant operations.","title":"Parameter Analytics"},{"location":"user_interfaces/#user-management","text":"This section is used for user management: The screens that shows the user details is shown below The different sub sections of this section is explained below (as numbered in the image above) Add User Form : This is the user registration form used to add new user to the database with his ROLE(Admin, Mantainance , User). Note The admin user \"cmti\" cannot be deleted, for safety purposes.","title":"User Management"},{"location":"Code%20%26%20Services%20Location/GD%20Plant/","text":"Code & Services Location: GD Plant Introduction This section shows the code locations and some of the services names and locations. Code Locations Collector Services Static Collector Code Location /home/tnga_iot/iiot_project/gd_plant/collectors/cnc_static/main/main_static_collector.py Service Name static_collector_gd Service File Location (systemctl daemon file) /lib/systemd/system/static_collector_gd.service Dynamic Collector Code Location /home/tnga_iot/iiot_project/gd_plant/collectors/cnc_dynamic/main/main_dynamic_collector.py Service Name dynamic_collector_gd Service File Location (systemctl daemon file) /lib/systemd/system/dynamic_collector_gd.service Back End Services The back end in developed in FastApi and deployed as docker container. The codes are available in github and can be downloaded modified and dockerized to make any new changes. Front End Services Apache Server The front end is developed using html, css, javascript and react. It is being served by apache server. The codes are available in github and can be downloaded modified and build using node package manager and copied to this location (which the apache server will serve) /var/www/tnga_iot","title":"GD Plant"},{"location":"Code%20%26%20Services%20Location/GD%20Plant/#code-services-location-gd-plant","text":"","title":"Code &amp; Services Location: GD Plant"},{"location":"Code%20%26%20Services%20Location/GD%20Plant/#introduction","text":"This section shows the code locations and some of the services names and locations.","title":"Introduction"},{"location":"Code%20%26%20Services%20Location/GD%20Plant/#code-locations","text":"","title":"Code Locations"},{"location":"Code%20%26%20Services%20Location/GD%20Plant/#collector-services","text":"Static Collector Code Location /home/tnga_iot/iiot_project/gd_plant/collectors/cnc_static/main/main_static_collector.py Service Name static_collector_gd Service File Location (systemctl daemon file) /lib/systemd/system/static_collector_gd.service Dynamic Collector Code Location /home/tnga_iot/iiot_project/gd_plant/collectors/cnc_dynamic/main/main_dynamic_collector.py Service Name dynamic_collector_gd Service File Location (systemctl daemon file) /lib/systemd/system/dynamic_collector_gd.service","title":"Collector Services"},{"location":"Code%20%26%20Services%20Location/GD%20Plant/#back-end-services","text":"The back end in developed in FastApi and deployed as docker container. The codes are available in github and can be downloaded modified and dockerized to make any new changes.","title":"Back End Services"},{"location":"Code%20%26%20Services%20Location/GD%20Plant/#front-end-services","text":"Apache Server The front end is developed using html, css, javascript and react. It is being served by apache server. The codes are available in github and can be downloaded modified and build using node package manager and copied to this location (which the apache server will serve) /var/www/tnga_iot","title":"Front End Services"},{"location":"Code%20%26%20Services%20Location/TNGA%20Plant/","text":"Code & Services Location: TNGA Plant Introduction This section shows the code locations and some of the services names and locations. Code Locations Collector Services Static Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_static_collector.py Service Name static_collector Service File Location (systemctl daemon file) /lib/systemd/system/static_collector.service Dynamic Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_dynamic_collector.py Service Name dynamic_collector Service File Location (systemctl daemon file) /lib/systemd/system/dynamic_collector.service Laser Cladding Collector Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_clad_main_2/laser_clad_main/main.py Service Name laser_cladding_monitoring Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring.service Laser Cladding Collector B Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_cladding_b/laser_clad_main/main.py Service Name laser_cladding_monitoring_b Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring_b.service SPM Journal Grinding Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_spm/codes/laser_clad_main/main_2.py Service Name journal_grinding_jop_X_collector Service File Location JOP 105 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_105_collector.service Service File Location JOP 130 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_130_collector.service Service File Location JOP 140 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_140_collector.service Part Count Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name part_count_collector Service File Location (systemctl daemon file) /etc/systemd/system/part_count_collector.service Email Sender Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name email_sender Service File Location (systemctl daemon file) /etc/systemd/system/email_sender.service Summary Repory Generator Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name report_summary_generator Service File Location (systemctl daemon file) /etc/systemd/system/report_summary_generator.service Back End Services The back end in developed in FastApi and deployed as docker container. The codes are available in github and can be downloaded modified and dockerized to make any new changes. Front End Services Apache Server The front end is developed using html, css, javascript and react. It is being served by apache server. The codes are available in github and can be downloaded modified and build using node package manager and copied to this location (which the apache server will serve) /var/www/tnga_iot","title":"TNGA Plant"},{"location":"Code%20%26%20Services%20Location/TNGA%20Plant/#code-services-location-tnga-plant","text":"","title":"Code &amp; Services Location: TNGA Plant"},{"location":"Code%20%26%20Services%20Location/TNGA%20Plant/#introduction","text":"This section shows the code locations and some of the services names and locations.","title":"Introduction"},{"location":"Code%20%26%20Services%20Location/TNGA%20Plant/#code-locations","text":"","title":"Code Locations"},{"location":"Code%20%26%20Services%20Location/TNGA%20Plant/#collector-services","text":"Static Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_static_collector.py Service Name static_collector Service File Location (systemctl daemon file) /lib/systemd/system/static_collector.service Dynamic Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_dynamic_collector.py Service Name dynamic_collector Service File Location (systemctl daemon file) /lib/systemd/system/dynamic_collector.service Laser Cladding Collector Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_clad_main_2/laser_clad_main/main.py Service Name laser_cladding_monitoring Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring.service Laser Cladding Collector B Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_cladding_b/laser_clad_main/main.py Service Name laser_cladding_monitoring_b Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring_b.service SPM Journal Grinding Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_spm/codes/laser_clad_main/main_2.py Service Name journal_grinding_jop_X_collector Service File Location JOP 105 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_105_collector.service Service File Location JOP 130 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_130_collector.service Service File Location JOP 140 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_140_collector.service Part Count Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name part_count_collector Service File Location (systemctl daemon file) /etc/systemd/system/part_count_collector.service Email Sender Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name email_sender Service File Location (systemctl daemon file) /etc/systemd/system/email_sender.service Summary Repory Generator Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name report_summary_generator Service File Location (systemctl daemon file) /etc/systemd/system/report_summary_generator.service","title":"Collector Services"},{"location":"Code%20%26%20Services%20Location/TNGA%20Plant/#back-end-services","text":"The back end in developed in FastApi and deployed as docker container. The codes are available in github and can be downloaded modified and dockerized to make any new changes.","title":"Back End Services"},{"location":"Code%20%26%20Services%20Location/TNGA%20Plant/#front-end-services","text":"Apache Server The front end is developed using html, css, javascript and react. It is being served by apache server. The codes are available in github and can be downloaded modified and build using node package manager and copied to this location (which the apache server will serve) /var/www/tnga_iot","title":"Front End Services"},{"location":"Code%20Explanation/Back%20End/","text":"Back End Introduction The requirements for the back end are: anyio==3.5.0 asgiref==3.5.1 bcrypt==3.2.2 cffi==1.15.1 click==8.1.3 colorama==0.4.4 cryptography==37.0.4 databases==0.5.5 ecdsa==0.18.0 et-xmlfile==1.1.0 fastapi==0.75.2 greenlet==1.1.2 h11==0.13.0 idna==3.3 motor==3.0.0 numpy==1.22.4 openpyxl==3.0.10 pandas==1.4.2 passlib==1.7.4 pony==0.7.16 psycopg2==2.9.3 pyasn1==0.4.8 pycparser==2.21 pydantic==1.9.0 pymongo==4.1.1 python-dateutil==2.8.2 python-dotenv==0.20.0 python-jose==3.3.0 python-multipart==0.0.5 pytz==2022.1 rsa==4.9 six==1.16.0 sniffio==1.2.0 SQLAlchemy==1.4.35 sqlalchemy2-stubs==0.0.2a22 sqlmodel==0.0.6 starlette==0.17.1 typing_extensions==4.2.0 uvicorn==0.17.6 XlsxWriter~=3.0.3 schedule~=1.1.0 Project layout main.py # The main entry point for the fastapi backend # application. machine_monitoring_app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. mongo_db_utils.py # This python module consist of utility functions # to help in mongodb operations. mongodb_client.py # This python module consist of functions to help # connect with mongodb. pony_models.py # This python module consist of classes for the # ORMs with timescaledb. exception_handling/ # This python package consist of modules related # to exception handling. __init__.py # The Initialization file for the python package. custom_exception.py # This python module consist of classes for custom # exception handling. models/ # This python package consist of modules for the # pydantic classes. __init__.py # The Initialization file for the python package. base_data_models.py # The file consist of base pydantic models. request_models.py # The file consist of pydantic models that are used # for request body. response_models.py # The file consist of pydantic models that are used # for response body. router/ # The package consist of all endpoint of this backend. __init__.py # The Initialization file for the python package. core_data_route.py # The consist of core end points for this back end. router_dependencies.py # The file consist of functions to help other end points # Such as user authentication using jwt tokens. security_routes.py # The file consist of endpoint for user creation # and login methods. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. configuration_helper.py # The consist of functions to help in configuration # Such as logger configuration, database configuration, and # Initial server configuration. global_variables.py # The file consist of function to return some common # Global variables. __init__.py # The Initialization file for the python package. API Endpoints The back end exposes api's to carry out different functionalites of the web application. The end points are classified into two type, core data routes and security routes. They are explained below. Core Data Route These set of end points consist of all the core routes requrired for data access and manipulation. Get End Points These are end points used to access data. /api/v1/machine-state/{parameterGroupId} - This end point is used to get the status of machines in the given parameter group (such as encoder temperature). Input Parameter parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). Response Body - The response body will consist of dictionary of two important key values, the first one denotes the status of machines (that are in abnormal condition) and second one is the summary of status of all other parameter groups (17 groups) { \"param\" : 4 , \"param_actual_name\" : \"ENCODER_TEMPERATURE\" , \"machines\" : [ { \"name\" : \"T_B_OP160\" , \"status\" : 2 , \"axes\" : [ { \"name\" : 1 , \"actual_name\" : \"PulseCoderTemp_1_path1_T_B_OP160\" , \"last_update_time\" : 1662514103 , \"value\" : 55 , \"status\" : 2 } ] }, { \"name\" : \"T_B_OP195A\" , \"status\" : 2 , \"axes\" : [ { \"name\" : 1 , \"actual_name\" : \"PulseCoderTemp_1_path1_T_B_OP195A\" , \"last_update_time\" : 1662514230 , \"value\" : 53 , \"status\" : 2 } ] } ], \"params_group_status\" : [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] } Explanation for the response body is given below { \"param\" : \"This is the id of the parameter group in the parameter group table\" , \"param_actual_name\" : \"Actual name of the parameter group\" , \"machines\" : [ { \"name\" : \"Name of the machine\" , \"status\" : \"Status of the machines, 1 - ok, 2-warning, 3-critical\" , \"axes\" : [ { \"name\" : \"Axis Id\" , \"actual_name\" : \"Actual name of the parameter as mentioned in the mongodb\" , \"last_update_time\" : \"The recent most time when the parameter was updates\" , \"value\" : \"Value of the parameter\" , \"status\" : \"status of the axis/parameter\" } ] }], \"params_group_status\" : \"List of length 17 with values either 1, 2 or 3 denoting the summary of status of all machines in that paramter group\" } /api/v1/{machineName}/{parameterGroupId}/{axisId} - This end point is used to get the real time data for a given machine, parameter group and axis.the given parameter group (such as encoder temperature). Input Parameter machineName - This is the name of the machine as recorded in the machines table. parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). axisId - This is the id as given in the machines axis translation file. Response Body - The response body will consist of dictionary of two important key values, the first one denotes the real time data and second one denotes the timestamp of those data. { \"param\" : 4 , \"axis\" : 0 , \"machine\" : \"T_B_OP160\" , \"start_time\" : 1662512183000 , \"stop_time\" : 1662512303000 , \"data\" : [ 36 , 37 , 36 ], \"timestamps\" : [ 1662512183000 , 1662512243000 , 1662512303000 ], \"critical_limit\" : 60 , \"warning_limit\" : 50 } Explanation for the response body is given below { \"param\" : \"This is the id of the parameter group in the parameter group table\" , \"axis\" : \"Axis Id\" , \"machine\" : \"Machine name\" , \"start_time\" : \"The start time of the returned data in epoch format\" , \"stop_time\" : \"The end time of the returned data in epoch format\" , \"data\" : \"List of real time data values\" , \"timestamps\" : \"List of timestamps in epoch format for the above data points\" , \"critical_limit\" : \"The critical limit value for this parameter\" , \"warning_limit\" : \"This is the warning limit value for this parameter\" } /api/v1/{machineName}/alarms - This end point is used to get the summary of alarms for a given machine between given start and end time. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which alarm summary is requried. startTime - This is the start time in epoch format for which a summary of the alarms is requried. endTime - This is the end time in epoch format for which a summary of the alarms is requried. Response Body - The response body will consist of dictionary of three important key values, the first one denotes alarm count data and second one denotes the total timespan of alarms, third one denotes the timeline data for the alarms between the given start and end time. { \"data\" : { \"count_data\" : [ { \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" , \"total_count\" : 122 }, { \"message\" : \"PMC ALARM\" , \"total_count\" : 1 } ], \"timespan_data\" : [ { \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" , \"total_time\" : 353688.5 }, { \"message\" : \"PMC ALARM\" , \"total_time\" : 5 } ], \"timeline_data\" : [ { \"enddate_epoch_time\" : 1655101839 , \"update_epoch_time\" : 1655093313.5 , \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" }, { \"enddate_epoch_time\" : 1653279888.5 , \"update_epoch_time\" : 1653279883.5 , \"message\" : \"PMC ALARM\" } ] } } Explanation for the response body is given below { \"data\" : { \"count_data\" : [ { \"message\" : \"The alarm message\" , \"total_count\" : \"The total number of times this alarm occured during the given time\" } ], \"timespan_data\" : [ { \"message\" : \"The alarm message\" , \"total_time\" : \"The total number of seconds this alarm occured during the given time\" } ], \"timeline_data\" : [ { \"enddate_epoch_time\" : \"The enddate time of this alarm as mentioned in the mtlinki mongodb\" , \"update_epoch_time\" : \"The updatedate time of this alarm as mentioned in the mtlinki mongodb\" , \"message\" : \"The alarm message\" } ] } } Post End Points These are end points used to create new data. /api/v1/{machineName}/{sparePart} - This end point is used to create new spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which new spare part needs to be created. sparePart - This is the name of the spare part that needs to be created for this machine. referencePartNumber - This is the reference part number (which is equivalent to the part number for the machine when the new part is created or the part count when reset button is pressed). This is used to get the relative part count for the specific spare part. For example if new spare part called \"spare part 1\" is created when the total part count of the machine is 1000, the reference part number would be 1000, if the total part count for the machine is increased to 1001, then the part count for this spare part would be 1 (calculatd by subtracting the reference part count for the spare part from the total part count of the machine, 10001 - 1000 = 1 in this case) warningLimit - This is the warning limit for this spare part. criticalLimit - This is the critical limit for this spare part. Response Body - If the creation of new spare part was succesful it returns the (same) input parameters that were given by the client. { \"id\" : 1 , \"part_name\" : \"Spart Part 1\" , \"reference_part_number\" : 100 , \"warning_limit\" : 1000 , \"critical_limit\" : 1500 , \"machine_id\" : 2 , \"count\" : 0 } Explanation for the response body is given below { \"id\" : \"This is the row id in the spare parts table in the postgresql\" , \"part_name\" : \"The spare part name\" , \"reference_part_number\" : \"This is the referecen part number\" , \"warning_limit\" : \"Warning limit for this spare part\" , \"critical_limit\" : \"Critical limit for this spare part\" , \"machine_id\" : \"This is the row id corresponding to the machine in the machines table in postgresql\" , \"count\" : \"This is the current part count for the spare part, initially it would be zero\" } Put End Points These are end points used to update existing data. /api/v1/{machineName}/{sparePart} - This end point is used to update an existing spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which new spare part needs to be created. sparePart - This is the name of the spare part that needs to be created for this machine. parameterName - This is shows which parameter we want to update for the spare part, it could either be reference part number, warning limit or critical limit. parameterValue - This is the parameter value. Response Body - If the spare part was succesful updated it returns the parameters that were given by the client during the creation of the spare part. { \"id\" : 1 , \"part_name\" : \"Spart Part 1\" , \"reference_part_number\" : 100 , \"warning_limit\" : 1000 , \"critical_limit\" : 1500 , \"machine_id\" : 2 , \"count\" : 10 } Explanation for the response body is given below { \"id\" : \"This is the row id in the spare parts table in the postgresql\" , \"part_name\" : \"The spare part name\" , \"reference_part_number\" : \"This is the referecen part number\" , \"warning_limit\" : \"Warning limit for this spare part\" , \"critical_limit\" : \"Critical limit for this spare part\" , \"machine_id\" : \"This is the row id corresponding to the machine in the machines table in postgresql\" , \"count\" : \"This is the current part count for the spare part, initially it would be zero\" } /api/v1/parameters_limit/{machineName}/{parameterGroupId}}/{axisId} - This end point is used to update the warning /critical limits for the static parameter or to set new or update(append) reference signal for dynamic parameter. Input Parameter machineName - This is the name of the machine as recorded in the machines table whose parameter limits is to be set/updated. parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). axisId - This is the id as given in the machines axis translation file. setType - This is shows what parameter that the client is trying to set, it could be warning_limit, critical_limit, reference_signal. limit - This is the limit value. append - This tells if the client is trying to append new reference signal to existing reference signal (value should be true), or replace the existing reference signal with new signal (in this case the append parameter should be false). This is applicable only if the setType is reference_signal. Request Body - This is a list of reference signal values, for example : [1, 2, 5, 8] Response Body - If the limits are sucessfully updated, it return the set type and value. { \"set_type\" : \"warning_limit\" , \"value\" : 55 } Explanation for the response body is given below { \"set_type\" : \"The parameter set type\" , \"value\" : \"The set value for the parameter\" } Delete End Points These are end points used to delete data. /api/v1/{machineName}/{sparePart} - This end point is used to delete an existing spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which a spare part needs to be deleted. sparePart - This is the name of the spare part that needs to be deleted for this machine. Response Body - If returns a message regarding the success or failure of the operation. { \"detail\" : \"Successfully Deleted\" , \"spare_part\" : \"Spart Part 1\" } Explanation for the response body is given below { \"detail\" : \"Information whether the deletion was successful or not\" , \"spare_part\" : \"Spart Part name\" } Security Route These set of end points consist of all the routes requrired for security related operations. Post End Points These are end points used to post data. /api/v1/auth - This end point is used to login a user and give JWT token for the session. Request Body { \"username\" : \"The user name\" , \"password\" : \"The user's password\" } Response Body { \"access_token\" : \"eyJhbGiIsInR5cCI6IkpXVCJ9.ey6gH9RWI5D5PFjI\" , \"token_type\" : \"bearer\" } Explanation for the response body is given below { \"access_token\" : \"The JWT token\" , \"token_type\" : \"token type\" } /api/v1/register - This end point is used to register a new user, this can be done only be admin users. Request Body { \"username\" : \"new_user\" , \"email\" : \"new_user@mail.com\" , \"full_name\" : \"User Name\" , \"password\" : \"password\" } Response Body { \"username\" : \"user name\" , \"email\" : \"email id of user\" , \"full_name\" : \"Full name of user\" }","title":"Back End Services"},{"location":"Code%20Explanation/Back%20End/#back-end","text":"","title":"Back End"},{"location":"Code%20Explanation/Back%20End/#introduction","text":"The requirements for the back end are: anyio==3.5.0 asgiref==3.5.1 bcrypt==3.2.2 cffi==1.15.1 click==8.1.3 colorama==0.4.4 cryptography==37.0.4 databases==0.5.5 ecdsa==0.18.0 et-xmlfile==1.1.0 fastapi==0.75.2 greenlet==1.1.2 h11==0.13.0 idna==3.3 motor==3.0.0 numpy==1.22.4 openpyxl==3.0.10 pandas==1.4.2 passlib==1.7.4 pony==0.7.16 psycopg2==2.9.3 pyasn1==0.4.8 pycparser==2.21 pydantic==1.9.0 pymongo==4.1.1 python-dateutil==2.8.2 python-dotenv==0.20.0 python-jose==3.3.0 python-multipart==0.0.5 pytz==2022.1 rsa==4.9 six==1.16.0 sniffio==1.2.0 SQLAlchemy==1.4.35 sqlalchemy2-stubs==0.0.2a22 sqlmodel==0.0.6 starlette==0.17.1 typing_extensions==4.2.0 uvicorn==0.17.6 XlsxWriter~=3.0.3 schedule~=1.1.0","title":"Introduction"},{"location":"Code%20Explanation/Back%20End/#project-layout","text":"main.py # The main entry point for the fastapi backend # application. machine_monitoring_app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. mongo_db_utils.py # This python module consist of utility functions # to help in mongodb operations. mongodb_client.py # This python module consist of functions to help # connect with mongodb. pony_models.py # This python module consist of classes for the # ORMs with timescaledb. exception_handling/ # This python package consist of modules related # to exception handling. __init__.py # The Initialization file for the python package. custom_exception.py # This python module consist of classes for custom # exception handling. models/ # This python package consist of modules for the # pydantic classes. __init__.py # The Initialization file for the python package. base_data_models.py # The file consist of base pydantic models. request_models.py # The file consist of pydantic models that are used # for request body. response_models.py # The file consist of pydantic models that are used # for response body. router/ # The package consist of all endpoint of this backend. __init__.py # The Initialization file for the python package. core_data_route.py # The consist of core end points for this back end. router_dependencies.py # The file consist of functions to help other end points # Such as user authentication using jwt tokens. security_routes.py # The file consist of endpoint for user creation # and login methods. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. configuration_helper.py # The consist of functions to help in configuration # Such as logger configuration, database configuration, and # Initial server configuration. global_variables.py # The file consist of function to return some common # Global variables. __init__.py # The Initialization file for the python package.","title":"Project layout"},{"location":"Code%20Explanation/Back%20End/#api-endpoints","text":"The back end exposes api's to carry out different functionalites of the web application. The end points are classified into two type, core data routes and security routes. They are explained below.","title":"API Endpoints"},{"location":"Code%20Explanation/Back%20End/#core-data-route","text":"These set of end points consist of all the core routes requrired for data access and manipulation.","title":"Core Data Route"},{"location":"Code%20Explanation/Back%20End/#get-end-points","text":"These are end points used to access data. /api/v1/machine-state/{parameterGroupId} - This end point is used to get the status of machines in the given parameter group (such as encoder temperature). Input Parameter parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). Response Body - The response body will consist of dictionary of two important key values, the first one denotes the status of machines (that are in abnormal condition) and second one is the summary of status of all other parameter groups (17 groups) { \"param\" : 4 , \"param_actual_name\" : \"ENCODER_TEMPERATURE\" , \"machines\" : [ { \"name\" : \"T_B_OP160\" , \"status\" : 2 , \"axes\" : [ { \"name\" : 1 , \"actual_name\" : \"PulseCoderTemp_1_path1_T_B_OP160\" , \"last_update_time\" : 1662514103 , \"value\" : 55 , \"status\" : 2 } ] }, { \"name\" : \"T_B_OP195A\" , \"status\" : 2 , \"axes\" : [ { \"name\" : 1 , \"actual_name\" : \"PulseCoderTemp_1_path1_T_B_OP195A\" , \"last_update_time\" : 1662514230 , \"value\" : 53 , \"status\" : 2 } ] } ], \"params_group_status\" : [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] } Explanation for the response body is given below { \"param\" : \"This is the id of the parameter group in the parameter group table\" , \"param_actual_name\" : \"Actual name of the parameter group\" , \"machines\" : [ { \"name\" : \"Name of the machine\" , \"status\" : \"Status of the machines, 1 - ok, 2-warning, 3-critical\" , \"axes\" : [ { \"name\" : \"Axis Id\" , \"actual_name\" : \"Actual name of the parameter as mentioned in the mongodb\" , \"last_update_time\" : \"The recent most time when the parameter was updates\" , \"value\" : \"Value of the parameter\" , \"status\" : \"status of the axis/parameter\" } ] }], \"params_group_status\" : \"List of length 17 with values either 1, 2 or 3 denoting the summary of status of all machines in that paramter group\" } /api/v1/{machineName}/{parameterGroupId}/{axisId} - This end point is used to get the real time data for a given machine, parameter group and axis.the given parameter group (such as encoder temperature). Input Parameter machineName - This is the name of the machine as recorded in the machines table. parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). axisId - This is the id as given in the machines axis translation file. Response Body - The response body will consist of dictionary of two important key values, the first one denotes the real time data and second one denotes the timestamp of those data. { \"param\" : 4 , \"axis\" : 0 , \"machine\" : \"T_B_OP160\" , \"start_time\" : 1662512183000 , \"stop_time\" : 1662512303000 , \"data\" : [ 36 , 37 , 36 ], \"timestamps\" : [ 1662512183000 , 1662512243000 , 1662512303000 ], \"critical_limit\" : 60 , \"warning_limit\" : 50 } Explanation for the response body is given below { \"param\" : \"This is the id of the parameter group in the parameter group table\" , \"axis\" : \"Axis Id\" , \"machine\" : \"Machine name\" , \"start_time\" : \"The start time of the returned data in epoch format\" , \"stop_time\" : \"The end time of the returned data in epoch format\" , \"data\" : \"List of real time data values\" , \"timestamps\" : \"List of timestamps in epoch format for the above data points\" , \"critical_limit\" : \"The critical limit value for this parameter\" , \"warning_limit\" : \"This is the warning limit value for this parameter\" } /api/v1/{machineName}/alarms - This end point is used to get the summary of alarms for a given machine between given start and end time. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which alarm summary is requried. startTime - This is the start time in epoch format for which a summary of the alarms is requried. endTime - This is the end time in epoch format for which a summary of the alarms is requried. Response Body - The response body will consist of dictionary of three important key values, the first one denotes alarm count data and second one denotes the total timespan of alarms, third one denotes the timeline data for the alarms between the given start and end time. { \"data\" : { \"count_data\" : [ { \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" , \"total_count\" : 122 }, { \"message\" : \"PMC ALARM\" , \"total_count\" : 1 } ], \"timespan_data\" : [ { \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" , \"total_time\" : 353688.5 }, { \"message\" : \"PMC ALARM\" , \"total_time\" : 5 } ], \"timeline_data\" : [ { \"enddate_epoch_time\" : 1655101839 , \"update_epoch_time\" : 1655093313.5 , \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" }, { \"enddate_epoch_time\" : 1653279888.5 , \"update_epoch_time\" : 1653279883.5 , \"message\" : \"PMC ALARM\" } ] } } Explanation for the response body is given below { \"data\" : { \"count_data\" : [ { \"message\" : \"The alarm message\" , \"total_count\" : \"The total number of times this alarm occured during the given time\" } ], \"timespan_data\" : [ { \"message\" : \"The alarm message\" , \"total_time\" : \"The total number of seconds this alarm occured during the given time\" } ], \"timeline_data\" : [ { \"enddate_epoch_time\" : \"The enddate time of this alarm as mentioned in the mtlinki mongodb\" , \"update_epoch_time\" : \"The updatedate time of this alarm as mentioned in the mtlinki mongodb\" , \"message\" : \"The alarm message\" } ] } }","title":"Get End Points"},{"location":"Code%20Explanation/Back%20End/#post-end-points","text":"These are end points used to create new data. /api/v1/{machineName}/{sparePart} - This end point is used to create new spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which new spare part needs to be created. sparePart - This is the name of the spare part that needs to be created for this machine. referencePartNumber - This is the reference part number (which is equivalent to the part number for the machine when the new part is created or the part count when reset button is pressed). This is used to get the relative part count for the specific spare part. For example if new spare part called \"spare part 1\" is created when the total part count of the machine is 1000, the reference part number would be 1000, if the total part count for the machine is increased to 1001, then the part count for this spare part would be 1 (calculatd by subtracting the reference part count for the spare part from the total part count of the machine, 10001 - 1000 = 1 in this case) warningLimit - This is the warning limit for this spare part. criticalLimit - This is the critical limit for this spare part. Response Body - If the creation of new spare part was succesful it returns the (same) input parameters that were given by the client. { \"id\" : 1 , \"part_name\" : \"Spart Part 1\" , \"reference_part_number\" : 100 , \"warning_limit\" : 1000 , \"critical_limit\" : 1500 , \"machine_id\" : 2 , \"count\" : 0 } Explanation for the response body is given below { \"id\" : \"This is the row id in the spare parts table in the postgresql\" , \"part_name\" : \"The spare part name\" , \"reference_part_number\" : \"This is the referecen part number\" , \"warning_limit\" : \"Warning limit for this spare part\" , \"critical_limit\" : \"Critical limit for this spare part\" , \"machine_id\" : \"This is the row id corresponding to the machine in the machines table in postgresql\" , \"count\" : \"This is the current part count for the spare part, initially it would be zero\" }","title":"Post End Points"},{"location":"Code%20Explanation/Back%20End/#put-end-points","text":"These are end points used to update existing data. /api/v1/{machineName}/{sparePart} - This end point is used to update an existing spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which new spare part needs to be created. sparePart - This is the name of the spare part that needs to be created for this machine. parameterName - This is shows which parameter we want to update for the spare part, it could either be reference part number, warning limit or critical limit. parameterValue - This is the parameter value. Response Body - If the spare part was succesful updated it returns the parameters that were given by the client during the creation of the spare part. { \"id\" : 1 , \"part_name\" : \"Spart Part 1\" , \"reference_part_number\" : 100 , \"warning_limit\" : 1000 , \"critical_limit\" : 1500 , \"machine_id\" : 2 , \"count\" : 10 } Explanation for the response body is given below { \"id\" : \"This is the row id in the spare parts table in the postgresql\" , \"part_name\" : \"The spare part name\" , \"reference_part_number\" : \"This is the referecen part number\" , \"warning_limit\" : \"Warning limit for this spare part\" , \"critical_limit\" : \"Critical limit for this spare part\" , \"machine_id\" : \"This is the row id corresponding to the machine in the machines table in postgresql\" , \"count\" : \"This is the current part count for the spare part, initially it would be zero\" } /api/v1/parameters_limit/{machineName}/{parameterGroupId}}/{axisId} - This end point is used to update the warning /critical limits for the static parameter or to set new or update(append) reference signal for dynamic parameter. Input Parameter machineName - This is the name of the machine as recorded in the machines table whose parameter limits is to be set/updated. parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). axisId - This is the id as given in the machines axis translation file. setType - This is shows what parameter that the client is trying to set, it could be warning_limit, critical_limit, reference_signal. limit - This is the limit value. append - This tells if the client is trying to append new reference signal to existing reference signal (value should be true), or replace the existing reference signal with new signal (in this case the append parameter should be false). This is applicable only if the setType is reference_signal. Request Body - This is a list of reference signal values, for example : [1, 2, 5, 8] Response Body - If the limits are sucessfully updated, it return the set type and value. { \"set_type\" : \"warning_limit\" , \"value\" : 55 } Explanation for the response body is given below { \"set_type\" : \"The parameter set type\" , \"value\" : \"The set value for the parameter\" }","title":"Put End Points"},{"location":"Code%20Explanation/Back%20End/#delete-end-points","text":"These are end points used to delete data. /api/v1/{machineName}/{sparePart} - This end point is used to delete an existing spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which a spare part needs to be deleted. sparePart - This is the name of the spare part that needs to be deleted for this machine. Response Body - If returns a message regarding the success or failure of the operation. { \"detail\" : \"Successfully Deleted\" , \"spare_part\" : \"Spart Part 1\" } Explanation for the response body is given below { \"detail\" : \"Information whether the deletion was successful or not\" , \"spare_part\" : \"Spart Part name\" }","title":"Delete End Points"},{"location":"Code%20Explanation/Back%20End/#security-route","text":"These set of end points consist of all the routes requrired for security related operations.","title":"Security Route"},{"location":"Code%20Explanation/Back%20End/#post-end-points_1","text":"These are end points used to post data. /api/v1/auth - This end point is used to login a user and give JWT token for the session. Request Body { \"username\" : \"The user name\" , \"password\" : \"The user's password\" } Response Body { \"access_token\" : \"eyJhbGiIsInR5cCI6IkpXVCJ9.ey6gH9RWI5D5PFjI\" , \"token_type\" : \"bearer\" } Explanation for the response body is given below { \"access_token\" : \"The JWT token\" , \"token_type\" : \"token type\" } /api/v1/register - This end point is used to register a new user, this can be done only be admin users. Request Body { \"username\" : \"new_user\" , \"email\" : \"new_user@mail.com\" , \"full_name\" : \"User Name\" , \"password\" : \"password\" } Response Body { \"username\" : \"user name\" , \"email\" : \"email id of user\" , \"full_name\" : \"Full name of user\" }","title":"Post End Points"},{"location":"Code%20Explanation/Collector/","text":"Collector Introduction The collector consist of scripts to collect data from all different data sources at TIEI, such as general purpose cnc machines, spm machines such as laser cladding, journal grinding. It consist of 4 separate collector services: Static Parameter Collector - This is used to collect data for static parameters Dynamic Parameter Collector - This is used to collect data for dynamic parameters SPM Parameter Collector - This is used to collect data for SPM machines Laser Cladding - This is used to collect data from laser cladding machines Journal Grinding - This is used to collect data from Journal Grinding machines Part Count Monitor/Collector - This is used to collect part count from all machines. Static and Dynamic Collector Project Requirement The requirements for the collector services are: pandas~=1.4.2 pymongo~=4.1.1 psycopg2~=2.9.3 pgcopy~=1.5.0 yagmail~=0.15.277 scipy~=1.8.1 XlsxWriter~=3.0.3 numpy~=1.23.0 Project layout The following layout shows the general project structure for the Static and dynamic parameters (59 cnc machines) collectors. main_static_collector.py # The main entry point for the static collector service. main_dynamic_collector.py # The main entry point for the dynamic collector service. main_report_sender.py # The main entry point for the report generation service. collector_app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. common_query_templates.py # This python module consist of template for common queries. exception_handling/ # This python package consist of modules related # to exception handling. __init__.py # The Initialization file for the python package. custom_exception_classes.py # This python module consist of classes for custom # exception handling classes. anomaly_detection/ # This python package consist of modules for the # anomaly detection. __init__.py # The Initialization file for the python package. detection_algorithm.py # The file consist of function to do Kruskal\u2013Wallis test. collector_classes/ # The package consist of modules that has collector classes. __init__.py # The Initialization file for the python package. collector_classes_module.py # The consist of core python classes that collect data. report_manager/ # The package consist of modules that for report generation. __init__.py # The Initialization file for the python package. email_Sender.py # The consist of functions to generate reports for abnormality. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. config_helper.py # The consist of functions to help in configuration # Such as logger configuration, database configuration exception_handling.py # The file consist of function for exception handling global_variables.py # The file consist of function to return some common # Global variables. __init__.py # The Initialization file for the python package. The core functionalities for the collector services are implemeted in the collector classes, namely: ParametersGroupBase - This is the class to represent the static parameter group such as encoder temperature. These have specific variables and methods to collect data from the MtLinki.L1SignalPoolActive for all the static parameters. These classes inherit from the ParametersGroupAbstract abstract class. DynamicParameters - This is the class to represent the dynamic parameter group such as spindleload. These have specific variables and methods to collect data from the MtLinki.L1SignalPool for all the dynamic parameters. These classes inherit from the ParametersGroupBase class, but have specific methods for the requriements of dynamic parameter. CollectorClass - This is the class that has variable and methods to use the ParametersGroupBase to represent the static parameters and orchestrate the collection of all static parameter group data. DynamicCollectorClass - This is the class that has variable and methods to use the DynamicParameters to represent the dynamic parameters and orchestrate the collection of all dynamic parameter group data. The UML class diagram for the above classes are given the diagram below: classDiagram ParametersGroupAbstract <|-- ParametersGroupBase ParametersGroupBase <|-- DynamicParameters CollectorClass <|-- DynamicCollectorClass ParametersGroupAbstract : +String group_name ParametersGroupAbstract : +String mongodb_query ParametersGroupAbstract : +Int warning_limit ParametersGroupAbstract : +Int critical_limit ParametersGroupAbstract : +Float latest_update_time ParametersGroupAbstract : +Float _temp_latest_update_time ParametersGroupAbstract : +String parameter_type ParametersGroupAbstract : +Pandas DataFrame recent_data ParametersGroupAbstract : +Pandas DataFrame next_alert_time_for_all_signals ParametersGroupAbstract : +Pandas DataFrame new_alerts ParametersGroupAbstract : +check_for_new_data() ParametersGroupAbstract : +get_new_data() ParametersGroupAbstract : +add_condition_columns() ParametersGroupAbstract : +insert_to_timescaledb() ParametersGroupAbstract : +check_for_new_anomaly() ParametersGroupAbstract : +send_alerts() class DynamicParameters{ +check_dynamic_condition() } ParametersGroupBase <-- CollectorClass:has static parameter DynamicParameters <-- DynamicCollectorClass:has dynamic parameter class CollectorClass{ +String read_cycle_time +String static_parameters +String dynamic_parameters +int combined_alerts +load_parameters() +do_workflow() +merge_alerts() +send_combined_alerts() +start_collector() } Special Purpose Machines For all the spm machines, the pc which has the log files, is connected to the linux server through network, and the directory is continously monitored for new log files. As soon as a new file is generated, the services will read them and transforms the data to the timescaledb format and inserts them. Project Requirement The requirements for the laser cladding collector services are: numpy==1.22.3 pandas==1.4.2 pgcopy==1.5.0 psycopg2==2.9.3 python-dateutil==2.8.2 pytz==2022.1 six==1.16.0 Project layout The following layout shows the general project structure for all the SPM collectors. main.py # The main entry point for the laser cladding collector. app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. data_transformation_Service/ # This python package consist of modules related # to functions that does transformation of log files to # Database format. __init__.py # The Initialization file for the python package. transformation_functions.py # This python module consist of function to do log file # File transformation. file_system_operation/ # This python package consist of modules for the # directory monitoring. __init__.py # The Initialization file for the python package. directory_monitoring.py # The file consist of function to monitor the machine for # New log files. initialization_services/ # The package consist of modules that has collector classes. __init__.py # The Initialization file for the python package. initial_setup.py # The consist of functions to do initial set up of this service. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. check_mount.py # The consist of functions to check if the machine is # Mounted as a connected device to the linux server config_helper.py # The file consist of function for configuration such as log, database input_getter.py # The file consist of function to get input from the command line __init__.py # The Initialization file for the python package.","title":"Collector Services"},{"location":"Code%20Explanation/Collector/#collector","text":"","title":"Collector"},{"location":"Code%20Explanation/Collector/#introduction","text":"The collector consist of scripts to collect data from all different data sources at TIEI, such as general purpose cnc machines, spm machines such as laser cladding, journal grinding. It consist of 4 separate collector services: Static Parameter Collector - This is used to collect data for static parameters Dynamic Parameter Collector - This is used to collect data for dynamic parameters SPM Parameter Collector - This is used to collect data for SPM machines Laser Cladding - This is used to collect data from laser cladding machines Journal Grinding - This is used to collect data from Journal Grinding machines Part Count Monitor/Collector - This is used to collect part count from all machines.","title":"Introduction"},{"location":"Code%20Explanation/Collector/#static-and-dynamic-collector","text":"","title":"Static and Dynamic Collector"},{"location":"Code%20Explanation/Collector/#project-requirement","text":"The requirements for the collector services are: pandas~=1.4.2 pymongo~=4.1.1 psycopg2~=2.9.3 pgcopy~=1.5.0 yagmail~=0.15.277 scipy~=1.8.1 XlsxWriter~=3.0.3 numpy~=1.23.0","title":"Project Requirement"},{"location":"Code%20Explanation/Collector/#project-layout","text":"The following layout shows the general project structure for the Static and dynamic parameters (59 cnc machines) collectors. main_static_collector.py # The main entry point for the static collector service. main_dynamic_collector.py # The main entry point for the dynamic collector service. main_report_sender.py # The main entry point for the report generation service. collector_app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. common_query_templates.py # This python module consist of template for common queries. exception_handling/ # This python package consist of modules related # to exception handling. __init__.py # The Initialization file for the python package. custom_exception_classes.py # This python module consist of classes for custom # exception handling classes. anomaly_detection/ # This python package consist of modules for the # anomaly detection. __init__.py # The Initialization file for the python package. detection_algorithm.py # The file consist of function to do Kruskal\u2013Wallis test. collector_classes/ # The package consist of modules that has collector classes. __init__.py # The Initialization file for the python package. collector_classes_module.py # The consist of core python classes that collect data. report_manager/ # The package consist of modules that for report generation. __init__.py # The Initialization file for the python package. email_Sender.py # The consist of functions to generate reports for abnormality. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. config_helper.py # The consist of functions to help in configuration # Such as logger configuration, database configuration exception_handling.py # The file consist of function for exception handling global_variables.py # The file consist of function to return some common # Global variables. __init__.py # The Initialization file for the python package. The core functionalities for the collector services are implemeted in the collector classes, namely: ParametersGroupBase - This is the class to represent the static parameter group such as encoder temperature. These have specific variables and methods to collect data from the MtLinki.L1SignalPoolActive for all the static parameters. These classes inherit from the ParametersGroupAbstract abstract class. DynamicParameters - This is the class to represent the dynamic parameter group such as spindleload. These have specific variables and methods to collect data from the MtLinki.L1SignalPool for all the dynamic parameters. These classes inherit from the ParametersGroupBase class, but have specific methods for the requriements of dynamic parameter. CollectorClass - This is the class that has variable and methods to use the ParametersGroupBase to represent the static parameters and orchestrate the collection of all static parameter group data. DynamicCollectorClass - This is the class that has variable and methods to use the DynamicParameters to represent the dynamic parameters and orchestrate the collection of all dynamic parameter group data. The UML class diagram for the above classes are given the diagram below: classDiagram ParametersGroupAbstract <|-- ParametersGroupBase ParametersGroupBase <|-- DynamicParameters CollectorClass <|-- DynamicCollectorClass ParametersGroupAbstract : +String group_name ParametersGroupAbstract : +String mongodb_query ParametersGroupAbstract : +Int warning_limit ParametersGroupAbstract : +Int critical_limit ParametersGroupAbstract : +Float latest_update_time ParametersGroupAbstract : +Float _temp_latest_update_time ParametersGroupAbstract : +String parameter_type ParametersGroupAbstract : +Pandas DataFrame recent_data ParametersGroupAbstract : +Pandas DataFrame next_alert_time_for_all_signals ParametersGroupAbstract : +Pandas DataFrame new_alerts ParametersGroupAbstract : +check_for_new_data() ParametersGroupAbstract : +get_new_data() ParametersGroupAbstract : +add_condition_columns() ParametersGroupAbstract : +insert_to_timescaledb() ParametersGroupAbstract : +check_for_new_anomaly() ParametersGroupAbstract : +send_alerts() class DynamicParameters{ +check_dynamic_condition() } ParametersGroupBase <-- CollectorClass:has static parameter DynamicParameters <-- DynamicCollectorClass:has dynamic parameter class CollectorClass{ +String read_cycle_time +String static_parameters +String dynamic_parameters +int combined_alerts +load_parameters() +do_workflow() +merge_alerts() +send_combined_alerts() +start_collector() }","title":"Project layout"},{"location":"Code%20Explanation/Collector/#special-purpose-machines","text":"For all the spm machines, the pc which has the log files, is connected to the linux server through network, and the directory is continously monitored for new log files. As soon as a new file is generated, the services will read them and transforms the data to the timescaledb format and inserts them.","title":"Special Purpose Machines"},{"location":"Code%20Explanation/Collector/#project-requirement_1","text":"The requirements for the laser cladding collector services are: numpy==1.22.3 pandas==1.4.2 pgcopy==1.5.0 psycopg2==2.9.3 python-dateutil==2.8.2 pytz==2022.1 six==1.16.0","title":"Project Requirement"},{"location":"Code%20Explanation/Collector/#project-layout_1","text":"The following layout shows the general project structure for all the SPM collectors. main.py # The main entry point for the laser cladding collector. app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. data_transformation_Service/ # This python package consist of modules related # to functions that does transformation of log files to # Database format. __init__.py # The Initialization file for the python package. transformation_functions.py # This python module consist of function to do log file # File transformation. file_system_operation/ # This python package consist of modules for the # directory monitoring. __init__.py # The Initialization file for the python package. directory_monitoring.py # The file consist of function to monitor the machine for # New log files. initialization_services/ # The package consist of modules that has collector classes. __init__.py # The Initialization file for the python package. initial_setup.py # The consist of functions to do initial set up of this service. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. check_mount.py # The consist of functions to check if the machine is # Mounted as a connected device to the linux server config_helper.py # The file consist of function for configuration such as log, database input_getter.py # The file consist of function to get input from the command line __init__.py # The Initialization file for the python package.","title":"Project layout"}]}